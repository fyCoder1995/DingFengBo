<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《你当像鸟飞往你的山》读书笔记</title>
    <link href="/DingFengBo/2023/06/12/%E3%80%8A%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/DingFengBo/2023/06/12/%E3%80%8A%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>过去总是美好的，因为一个人从来都意识不到当时的情绪，它后来扩展开来，因此我们只对过去，而非现在，拥有完整的情绪</p><p>——弗吉尼尔·伍尔夫</p></blockquote><blockquote><p>最终我认为，教育必须被视为一种对经验的不断重建；教育的过程和目标合二为一，是一回事</p><p>——约翰·杜威</p></blockquote><blockquote><p>沙粒不可计数，叠压成沉积物，然后成为岩石</p></blockquote><blockquote><p>我在学习的这个技能至关重要，那就是对不懂的东西耐心阅读</p></blockquote><blockquote><p>只有依靠自己，胜算才更大</p></blockquote><blockquote><p>我可以相信自己：我身上有某种东西，某种先知们具有的东西，不论男女，也不分老少，是一种内在的、不可动摇的价值。</p></blockquote><blockquote><p>有的人反对平等的大潮；有的人必须从某些人那里夺取自由</p></blockquote><blockquote><p> 我再也不允许自己在一场我并不理解的冲突中首当其冲</p></blockquote><blockquote><p>好奇心是一种奢侈品，只有经济上有保障的人才有权享有</p></blockquote><blockquote><p>找出你的能力所在，然后再决定你是谁</p></blockquote><blockquote><p>风就是风。人能受得了地面上的阵阵狂风，所以也能禁得住高空的风。它们没有区别。不同的是头脑中怎么想</p></blockquote><blockquote><p>我允许自己不可爱，但不是给人当绿叶</p></blockquote><blockquote><p>过去是一个幽灵，虚无缥缈，没什么影响力。只有未来才有分量</p></blockquote><blockquote><p>我所有的奋斗，我多年来的学习，一直为了让自己得到这样一种特权：见证和体验超越父亲所给予我的更多的真理，并用这些真理构建我自己的思想。我开始相信，评价多种思想、多种历史和多种观点的能力是自我创造力的核心</p></blockquote><blockquote><p>负罪感源于一个人呢对自身不幸的恐惧，与他人无关。</p></blockquote><blockquote><p>“教育意味着获得不同的视角，理解不同的人、经历和历史。接受教育，但不要让你的教育僵化成傲慢。教育应该是思想的拓展，同理心的深化，视野的开阔。教育不应该使你的偏见变得更顽固。如果人们受过教育，他们应该变得不那么确定，而不是更确定。他们应该多听，少说，对差异满怀激情，热爱那些不同于他们的想法” </p><p>——塔拉·韦斯特弗《福布斯杂志》访谈</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传记类书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《我不喜欢人类,我想住进森林》读书笔记</title>
    <link href="/DingFengBo/2023/06/05/%E3%80%8A%E6%88%91%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%BA%BA%E7%B1%BB-%E6%88%91%E6%83%B3%E4%BD%8F%E8%BF%9B%E6%A3%AE%E6%9E%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/DingFengBo/2023/06/05/%E3%80%8A%E6%88%91%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%BA%BA%E7%B1%BB-%E6%88%91%E6%83%B3%E4%BD%8F%E8%BF%9B%E6%A3%AE%E6%9E%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>生活教会我欲盖弥彰的道理，所以还不如趁早交代</p></blockquote><blockquote><p>人类秉持并拥有的一切，一瞬间灰飞烟灭，只因这是存在和占有的最后一刻</p></blockquote><blockquote><p>别人爱怎么想怎么想。反正我也不喜欢他们，并且极少尊重他们的意见</p></blockquote><blockquote><p>我们独自出生，我们独自死去。只有从头至尾适应它。孤独是整个架构的基础。它本身就可以说是一根支撑梁。人和人可以生活在一起，但是在一起作为规则只是在身边的意思。</p></blockquote><blockquote><p>生活填满了原本不该填满它的东西，并且缺少什么我们注意到别人有的东西</p></blockquote><blockquote><p>并不是人类拥有地球。而是地球拥有我们人类。</p></blockquote><blockquote><p>电视本身关注的就是我们身上惹人讨厌的一切。那些在现实中已然让人难以接受的人类特质，一上电视更是昭然若揭</p></blockquote><blockquote><p>即将在脆弱的社会与常识幻象上扎孔的人民公敌必当除之而后快</p></blockquote><blockquote><p>现实总是很残酷，哪怕对驼鹿来说</p></blockquote><blockquote><p>人的问题在于，一旦一个空间里充满人，能看见的就只有人，没有空间。宽广荒芜的风景，一旦走进个把人就不再是宽广荒芜的风景。人类定义我们视线的落点。而人类的视线又总是落在别的人类身上。这样就无形中制造了一个错觉，好像人类要比地球上不是人类的东西来得重要。这是个普遍的错觉。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>北欧小说类书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《如何阅读一本书》读书笔记</title>
    <link href="/DingFengBo/2023/05/23/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/DingFengBo/2023/05/23/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>“读的太快或太慢，都一无所获” ——[法] 帕斯卡尔</p></blockquote><h1 id="第一篇-阅读的层次"><a href="#第一篇-阅读的层次" class="headerlink" title="第一篇 阅读的层次"></a>第一篇 阅读的层次</h1><h2 id="阅读的活力与艺术"><a href="#阅读的活力与艺术" class="headerlink" title="阅读的活力与艺术"></a>阅读的活力与艺术</h2><ol><li><p>主动的阅读</p><p><em>阅读可以是一件多少主动的事；阅读越主动，效果越好</em></p></li><li><p>阅读的目标</p><p>—— 为获得资讯而读，以及为求得理解而读</p><p><strong>阅读艺术的定义：这是一个凭借着头脑运作，除了玩味读物中的一些字句之外，不假任何外助，以一己之力来提升自我的过程</strong></p></li><li><p>阅读就是学习</p><p>—— 指导型的学习，以及自我发现型的学习之间的差异</p><blockquote><p>“初学者的无知在于未学，而学者的无知在于学后”——蒙田</p></blockquote><p><strong>任何学习都不应该没有活力，就像任何阅读都不该死气沉沉</strong></p></li><li><p>老师的出席与缺席</p></li></ol><h2 id="阅读的层次"><a href="#阅读的层次" class="headerlink" title="阅读的层次"></a>阅读的层次</h2><p><em>阅读的四种层次：第一层次的阅读为<strong>基础阅读（初级阅读、基本阅读、初步阅读）</strong>；第二层次的阅读为*<em>检视阅读（略读、预读）</em></em> 特点是强调时间，需要在一定时间之内，抓住一本书的重点，是系统化略读的一门艺术；第三种层次的阅读为<strong>分析阅读</strong>特点是全盘的阅读、完整的阅读，或是说优质的阅读——你能做到的最好的阅读方式；第四种，也是最高层次的阅读为<strong>主题阅读（比较阅读）</strong>特点是，在做主题阅读时，阅读者会读很多书，而不是一本书，并列举出这些书之间相关之处，提出一个所有的书都谈到的主题*</p><h2 id="阅读的第一个层次：基础阅读"><a href="#阅读的第一个层次：基础阅读" class="headerlink" title="阅读的第一个层次：基础阅读"></a>阅读的第一个层次：基础阅读</h2><ol><li><p>学习阅读的阶段</p><p>1〉阅读准备阶段</p><p>2〉识字阶段</p><p>3〉快速建立字汇能力阶段</p><p>4〉精炼与增进前面所学的技巧阶段</p></li><li><p>阅读的阶段与层次</p><p>学习阅读的四个阶段完成才到达基础阅读层次</p></li><li><p>更高层次的阅读与高等教育</p><p>高等教育对于提升阅读层次并不十分理想</p></li><li><p>阅读与民主教育的理念</p><p><em>我们的国人应该变成一个人人真正“有能力”的阅读者，能够真正认知“有能力”这个字眼中的含义。达不到这样的境界，我们就无法应付未来世界的需求</em></p></li></ol><h2 id="阅读的第二个层次：检视阅读"><a href="#阅读的第二个层次：检视阅读" class="headerlink" title="阅读的第二个层次：检视阅读"></a>阅读的第二个层次：检视阅读</h2><ol><li><p>检视阅读一</p><p>—— 有系统的略读或粗读</p><p><em>略读的一些建议</em></p><p>1〉先看书名页，然后如果有序就先看序</p><p>2〉研究目录页</p><p>3〉如果书中附有索引，也要检阅一下</p><p>4〉不妨读一下出版者的介绍</p><p>5〉根据前面的印象，开始挑几个看来跟主题息息相关的篇章来看</p><p>5〉把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多</p></li><li><p>检视阅读二</p><p>—— 粗浅的阅读</p><p><strong>头一次面对一本很难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索</strong></p></li><li><p>阅读的速度</p><p><strong>每一本书，不论是多么难读的书，在无关紧要的间隙部分就可以读快一点。而一本好书，总会包含一些比较困难，应该慢慢阅读的内容</strong></p></li><li><p>逗留与倒退</p><p><em>可以利用双手训练自己的眼睛，跟着章节段落移动得越来越快</em></p></li><li><p>理解的问题</p><p><em>没有经过分析阅读，你就没法理解一本书</em></p></li><li><p>检视阅读的摘要</p><p><em>在阅读一本书的时候，慢不慢到不值得，快不该快到有损于满足与理解。不论怎么说，阅读的速度，不论是快还是慢，只不过是阅读问题一个微小的部分而已</em></p></li></ol><h2 id="如何做一个自我要求的读者"><a href="#如何做一个自我要求的读者" class="headerlink" title="如何做一个自我要求的读者"></a>如何做一个自我要求的读者</h2><ol><li><p>主动阅读的基础 </p><p>——一个阅读者要提出的四个基本问题</p><p>1》〉整体来说，这本书到底在谈些什么？</p><p>2》〉作者细部说了什么，怎么说的？</p><p>3》〉这本书说得有道理吗？是全部有道理，还是部分有道理？</p><p>4》〉这本书跟你有什么关系？</p><p><strong>你挂念的好书太多了，而除非你能真正起身接触到它们，把自己提升到同样的层次，否则你所挂念的这些好书只会使你厌倦而已</strong></p><p><strong>要保持主动的阅读，你不只是要有意愿这么做而已，还要有技巧——能战胜最初觉得自己能力不足部分，进而自我提升的艺术</strong></p></li><li><p>如何让一本书真正属于你自己</p><p><strong>方法</strong></p><p>1》〉画底线——在主要的重点，或重要又有力量的句子下画线</p><p>2》〉在画底线处的栏外再加画一道线</p><p>3》〉在空白处做星号或其他符号——用来强调书中十来个最重要的声明或段落即可</p><p>4》〉在空白处编号——作者的某个论点发展出一连串的重要陈述时，可以做顺序编号</p><p>5》〉在空白处记下其他页码——强调作者在书中其他部分也有过同样的论点，或相关要点，或是与此处观点不同的地方。</p><p>6》〉将关键字或句子圈出来</p><p>7》〉在书页的空白处做笔记</p></li><li><p>三种做笔记的方法</p><p><strong>方法</strong></p><p>1》〉结构笔记（检视阅读）</p><ul><li>第一，这是什么样的一本书</li><li>第二，整本书在谈的是什么？</li><li>第三，作者是借着怎样的整体架构，来发展他的观点或称述他对这个主题的理解？</li></ul><p>2》〉概念笔记（主题阅读）</p><p>3》〉辩证笔记（针对一场讨论情境的笔记）</p></li><li><p>培养阅读的习惯</p><p><strong>要养成习惯，除了不断地运作练习之外，别无他法</strong></p></li><li><p>由许多规则中养成一个习惯</p><p><strong>为了要忘掉这些单一的动作，一开始你必须先分别学会每一个单一的动作</strong></p><p><strong>养成阅读习惯，尤其是分析阅读，是一种心智上的活动，虽然复杂，但是仍然是可以训练出来的。而一旦学会了，你的阅读技巧就会越来越好。</strong></p></li></ol><h1 id="第二篇-阅读的第三个层次：分析阅读"><a href="#第二篇-阅读的第三个层次：分析阅读" class="headerlink" title="第二篇 阅读的第三个层次：分析阅读"></a>第二篇 阅读的第三个层次：分析阅读</h1><ul><li><input checked="" disabled="" type="checkbox"> 规则一：你一定要知道自己在读的是哪一类书，而且要越早知道越好。最好早在你开始阅读之前就先知道</li><li><input checked="" disabled="" type="checkbox"> 规则二：使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容</li><li><input checked="" disabled="" type="checkbox"> 规则三：将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体的架构</li><li><input checked="" disabled="" type="checkbox"> 规则四：找出作者要问的问题</li></ul><h2 id="一本书的分类"><a href="#一本书的分类" class="headerlink" title="一本书的分类"></a>一本书的分类</h2><ol><li><p>书籍分类的重要性</p><p>》你要知道风从哪个方向吹。</p><p><em>主要的分类法：一种是虚构的小说类；另一种是传达知识，说明性的论说类</em></p></li><li><p>从一本书的书名中你能学到什么</p><p><em>书名有时候会让书籍的分类变得比较容易一些</em></p></li><li><p>实用性vs.理论性作品</p><p><strong>我们一定要超越”知道这是怎么回事“，进而明白”如果我们想做些什么，应该怎么利用它“</strong></p><p><strong>首先，你要学习去怀疑一切</strong></p></li><li><p>理论性作品的分类</p><p>历史：就是纪事</p><p>科学：不会太在意过去的事，它所面对的是可能发生在任何时间、地点的事。</p><p>哲学：比较像科学，不像历史，追求的事一般的真理，而非发生在过去的特定事件，不管那个过去是近代或较远的年代</p></li></ol><h2 id="透视一本书"><a href="#透视一本书" class="headerlink" title="透视一本书"></a>透视一本书</h2><ol><li><p>结构与规划</p><p>——叙述整本书的大意</p><p><strong>一本书是一个艺术作品</strong></p><p><strong>动线架构</strong></p><p><em>一本好书，就像一栋好房子，每个部分都要很有秩序地排列起来</em></p><blockquote><p>“舞台使年轻人腐败堕落”——柏拉图</p></blockquote><p><strong>但永远要记得，最后找出一个架构是读者的责任，就跟当初作者有责任自己设定一个架构一样。只有当你读完整本书时，才能诚实地放下这个责任</strong></p><blockquote><p>这本书是在探索人类快乐的本质，分析在何种状态下，人类会获得或失去快乐，并说明在行为与思想上该如何去做，才能变得快乐或避免不幸，虽然其他美好的事物也被认可为幸福快乐的必要条件，像是财富、健康、友谊与生活在公正的社会中，但原则上还是强调以培养道德与心智上的善行为主。</p><p>——关于亚里士多德的《伦理学》简述</p></blockquote><blockquote><p>本书在探讨国家财富的资源。任何一个以劳力分工为主的经济体制，都要考虑到薪资的给付，资本利润的回收，积欠地主的租金等关系，这些就是物品价格的基本因素。本书讨论到如何更多元化地有效运用资本，并从金钱的起源与使用，谈到积累资本及使用资本。本书借着检验不同国家在不同状况下的富裕发展，比较了不同的政经系统，讨论了自由贸易的好处</p><p>——关于亚当·斯密的《国富论》简述</p></blockquote><blockquote><p>这本书所叙述的是，生物在数不清世代中所产生的变化，以及新种类的动物或植物如何从其中演变出来。本书讨论了动物在畜养状态下的变化，也讨论了动物在自然状态下的变化，进而说明”物竞天择，适者生存”之类的原理，如何形成并维持一个个族群。此外，本书也主张，物种并不是固定、永恒不变的族群，而是在世代交替中，由比较小的转变成比较明显的、固定的特征。有一些地层中的绝种动物，以及胚胎学与解剖学的比较证据，可以支持这些论点。</p><p>——关于达尔文的《物种起源》简述</p></blockquote></li><li><p>驾驭复杂的内容</p><p>——为一本书拟大纲的技巧</p><p>（1）作者将全书分成五个部分，第一部分谈的是什么，第二部分谈的是什么，第三部分谈的是别的事，第四部分则是另外的观点，第五部分又是另一些事</p><p>（2）第一个主要的部分又分成三个段落，第一段落为X，第二段落为Y，第三段落为Z</p><p>（3）在第一部分的第一阶段，作者有四个重点，第一个重点是A，第二个重点是B，第三个重点是C，第四个重点是18200882847等等。</p><p><strong>一个好的规则总是会将最完美的表现形容出来</strong></p><p><em>没有一本书是完美的，所以页不值得为任何一本书写出一个完美的纲要</em></p><p><strong>尽力而为就行了</strong></p><blockquote><p>一、把快乐当作是生命的终极目标，讨论快乐与其他善行的关系</p><p>二、讨论天生自然的行为，与养成好习惯、坏习惯的关系</p><p>三、讨论伦理与智性中各种不同的善行与恶行</p><p>四、讨论非善非恶的道德状态</p><p>五、讨论友谊</p><p>六、讨论喜悦，并完成一开始所谈到有关人类快乐的主题</p><p>——关于亚里士多德《伦理学》大纲</p></blockquote></li><li><p>阅读与写作的互惠技巧</p><p><strong>一个作品应该有整体感，清楚明白，前后连贯</strong></p><p><em>读者是要“发现”书中隐藏着的骨架。而作者则是以制造骨架为开始，但却想办法把骨架“隐藏”起来</em></p><p><strong>写作与阅读是一体两面的事</strong></p></li><li><p>发现作者的意图</p><p><em>一本书的作者在开始写作时，都是有一个问题或一连串的问题，而这本书的内容就是一个答案，或许多答案</em></p></li><li><p><strong>分析阅读的第一个阶段</strong>（找出一本书在谈些什么的四个规则）</p><p><strong>总结</strong></p><ol><li>依照书本的种类与主题作分类</li><li>用最简短的句子说出整本书在谈些什么</li><li>按照顺序与关系，列出全书的重要部分。将书中的纲要拟出来之后，再将各个部分的纲要也一一列出</li><li>找出作者在问的问题，或作者想要解决的问题</li></ol></li></ol><h2 id="与作者找出共通的词义"><a href="#与作者找出共通的词义" class="headerlink" title="与作者找出共通的词义"></a>与作者找出共通的词义</h2><p><strong>“找出共通的词义” 词义是可供沟通的知识的基本要素</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 规则五：找出重要单字，透过它们与作者达成共识（第一部分：找出重要单字，那些举足轻重的单字；第二部分：确认这些单字在使用时的最精确的意义）</li><li><input checked="" disabled="" type="checkbox"> 规则六：与句子及提案有关的规则</li><li><input checked="" disabled="" type="checkbox"> 规则七：与各种论述（arguments）有关</li><li><input checked="" disabled="" type="checkbox"> 规则八：找出作者的解答</li></ul><ol><li><p>单字vs.词义</p><p><em>沟通是一个人努力想要跟别人（也可能是动物或机器）分享他的知识、判断与情绪</em></p><p><em>我们可以将达成共识看作是一种使用文字的技巧，以达到沟通知识的目的</em></p><p>(1) 文法面向是处理单字的</p><p>(2) 逻辑面向是处理这些单字的意义，或说的更精确一点，是处理词义的</p><p><strong>一个单字可能代表许多不同的词义，而一个词义可以用许多不同的单字来解释</strong></p></li><li><p>找出关键字</p><p><strong>并不是作者所使用的每一个字都很重要，更进一步说，作者所使用的字大多数都不重要</strong></p><p><em>从一个读者的角度来看，最重要的字就是那些让你头痛的字</em></p></li><li><p>专门用语及特殊字汇</p><p><strong>每个知识领域都有独特的专门用语（technical vocabulary）</strong></p><p>》就积极面来说：只要熟悉一下那个领域，你就能找出这些专门的单字</p><p>》就消极面来说：你只要看到不是平常惯见的单字，就会知道那些字一定是专门用语</p><p><strong>没有主动的阅读或是毫无要求的阅读，最大的问题就在读者对字句毫不用心，结果自然无法跟作者达成共识了</strong></p></li><li><p>找出字义</p><p><strong>你一定要利用上下文自己已经了解的所有字句，来推敲出你所不了解的那个字的意思</strong></p><p><strong>一个就位的字就代表一个词义</strong></p><p>（1）<em>一个可以有许多不同意义的字，在使用的时候可以只用其中一个意义，也可以把多重意义合起来用</em></p><p>（2）<em>同义字问题：单个字可能与好几个词义有关；一个词义也可能与好几个字有关</em></p><p>（3）片语（phrase）问题：所有单字与与词义之间的关系，都成立于片语与词义之间的关系</p><p><strong>在读一本书的时候，找出重要的关键字，确认每个字不同意义的转换，并与作者找出共通的词义，你对一本书的理解力就会大大增加了。很少有一些习惯上的小小改变，会产生如此宏大的效果</strong></p></li></ol><h2 id="判断作者的主旨"><a href="#判断作者的主旨" class="headerlink" title="判断作者的主旨"></a>判断作者的主旨</h2><p><strong>作者的主旨如果没有理论的支持，就只是在抒发个人想法罢了</strong></p><p><em>分析阅读在这里的目的是在诠释作者的意图。而分析阅读的第一阶段的目的是掌握结构大纲，似乎有些背道而驰。其实不然，这是整体与部分的关系</em></p><ol><li><p>句子与主旨</p><p>》〉句子与段落是文法的单位、语言的单位</p><p>》〉主旨与论述是逻辑的单位，也就是思想与知识的单位</p><p><em>主旨是书内问题的答案。主旨所声明的是知识或观点</em></p><p><strong>“教与学的功能是互相连贯的”&#x3D;&#x3D;&#x3D;“传授知识与接受知识是息息相关的过程”</strong></p><p>(1) 找出关键字，与作者达成共识</p><p>(2) 将一本书中最重要的句子圈出来，找出其中的主旨</p><p>(3) 从相关文句的关联中，设法架构出一本书的基本论述</p></li><li><p>找出关键句</p><p><strong>作者沟通的主要核心是他所下的肯定与否定的判断，以及他为什么会这么做的理由</strong></p><p><strong>阅读的一部分本质就是被困惑，而且知道自己被困惑</strong></p><p><strong>怀疑是智慧的开始，从书本上学习跟从大自然学习是一样的</strong></p><p><em>除非你知道怎么运用，否则线索对你来说是毫无用处的</em></p></li><li><p>找出主旨</p><p><strong>你必须找出每个句子所包含的主旨</strong></p><p><em>句子所阐述的主旨所牵涉的内容比较多</em></p><p><em>复杂的句子通常要说明的不只一个主旨</em></p><p><strong>主旨并非存在于真空状态，二是跟我们生存的世界有关</strong></p></li><li><p>找出论述</p><p><strong>在任何一本书中都有许多段落根本没有任何论述——就连一部分也没有</strong></p><p>公式：</p><p><strong>如果可以， 找出书中说明重要论述的段落。但是，如果这个论述并没有这样表达出来，你就要去架构出来。你要从这一段或那一段中挑选句子出来，然后整理出前后顺序的主旨，以及其组成的论述</strong></p><p><em>在阅读的过程中你能让大脑不断地活动，能跟作者达成共识，找到他的主旨，那么你就能看出他的论述是什么了。而这也就是人类头脑的自然本能</em></p><p>》〉首先，要记住所有的论述都包含了一些声明</p><p>》〉其次，要区别出两种论述的不同之处</p><p>》〉第三，找出作者认为哪些事情是假设，哪些是能证实的或有根据的，以及哪些是不需要证实的自明之理</p><blockquote><p>“经由推论与实验证明，心室的脉动会让血液流过肺部及心脏，再推送到全身”</p><p>——《心血运动论》威廉·哈维</p></blockquote></li><li><p>找出解答</p><p><strong>找出作者在书中想要解决的主要问题</strong></p></li><li><p><strong>分析阅读的第二个阶段</strong>（诠释一本书的内容）</p><p><strong>总结</strong></p><ol><li>诠释作者使用的关键字，与作者达成共识。</li><li>从最重要的句子中抓出作者的重要主旨</li><li>找出作者的论述，重新架构这些论述的前因后果，以明白作者的主张。</li><li>确定作者已经解决了哪些问题，还有哪些是未解决的。在未解决的问题中，确定哪些是作者认为自己无法解决的问题。</li></ol></li></ol><h2 id="公正的评断一本书"><a href="#公正的评断一本书" class="headerlink" title="公正的评断一本书"></a>公正的评断一本书</h2><p><strong>阅读一本书，是一种对话</strong></p><p><em>主动的阅读不会为了已经了解一本书在说什么而停歇下来，必须能评论，提出批评，才算真正完成了这件事</em></p><ul><li><input checked="" disabled="" type="checkbox"> 规则九：在你说说出“我同意”，“我不同意”，或“我暂缓评论”之前，你一定要能肯定地说：“我了解了”</li><li><input checked="" disabled="" type="checkbox"> 规则十：当你不同意作者的观点时，要理性地表达自己的意见，不要无礼地辩驳或争论</li><li><input checked="" disabled="" type="checkbox"> 规则十一：尊重知识与个人观点的不同，在作任何评断之前，都要找出理论基础</li></ul><ol><li><p>受教是一种美德</p><blockquote><p>“阅读时不要反驳或挑毛病；也不要太相信，认为是理所当然；更不要交谈或评论。”</p><p>——培根</p><p>要把 “阅读时怀疑，或轻蔑作者的人” 大加挞伐——瓦尔特·司尔特</p><p>“没有一本书会坏到找不到一点好处的”</p><p>——塞万提斯</p></blockquote><p><strong>没有一本书会好到无懈可击</strong></p><p><strong>受教或是能学习是一种极为主动的美德</strong></p><p><em>最能学习的读者，也就是最能批评的读者</em></p><p><strong>光是努力，并不足以称得上受教。读者必须懂得如何评断一本书，就像他必须懂得如何才能了解一本书的内容</strong></p><p><em>我们需要在最后一个阶段训练自己受教的能力</em></p></li><li><p>修辞的作用</p><p><strong>修辞和人类的任何一种沟通都有关</strong></p><p><strong>修辞就是要知道如何去说服对方</strong></p></li><li><p>暂缓评论的重要性</p><p><strong>毫无理解便同意只是愚蠢，还不清楚便不同意也是无礼</strong></p><p><strong>说出“我不懂”也是个很重要的评断，但这只能在你尽过最大努力之后，因为书而不是你自己的理由才能说出这样的话</strong></p></li><li><p>避免争强好辩的重要性</p><p><strong>如果你知道或怀疑自己是错的，就没有必要去赢得那场争辩。</strong></p><p><em>事实上，你赢得争辩可能真的会在世上名噪一时，但长程来说，<strong>诚实</strong>才是更好的策略</em></p><blockquote><p>“我不能反驳你，苏格拉底，”阿加顿说：“让我们假设你说的都对好了。”</p><p>“阿加顿，你该说你不能反驳真理，因为苏格拉底是很容易被反驳的”</p><p>——柏拉图《会饮篇》</p></blockquote><blockquote><p>“其实这就是我们的责任，为了追求真理，要毁掉一些我们内心最亲近的事物，尤其像我们这样的哲学家或热爱智慧的人更是如此。因为，纵使双方是挚友，我们对真理的虔诚却是超越友谊的。”</p><p>——亚里士多德《诗学》</p></blockquote><p><em>把谈话当作是战争的人，要赢得战争就得为反对而反对，不论自己对错，都要反对成功</em></p><p><strong>就像他反对的一样，他也要有同意的心理准备</strong></p></li><li><p>化解争议</p><p><strong>人是理性的动物。理性是人类表达同意的力量源泉。人类的兽性与理性中不完美的部分，则是造成许多不同意的原因</strong></p><p><strong>知识的不相当永远可以用教导来解决</strong></p><p><em>在争论之中，一个人绝不能忘了这是教导别人，也是自己受教的一个机会</em></p><p><em>一个读者如果不能区别出知识的理论说明与个人观点的阐述，那他就无法从阅读中学到东西</em></p><p><em>知识存在于可以辨别的意见之中——那些有某种证据支持的意见</em></p><p><strong>批评式阅读的条件</strong></p><p>》〉第一：要求读者先完整的了解一本书，不要着急开始批评</p><p>》〉第二：恳请读者不要争强好胜或盲目反对</p><p>》〉第三：将知识的不同意见看作是大体上可以解决的问题</p></li></ol><h2 id="赞同或反对作者"><a href="#赞同或反对作者" class="headerlink" title="赞同或反对作者"></a>赞同或反对作者</h2><p><strong>当读者不只是盲目地跟从作者的论点，还能和作者的论点针锋相对时，他最后才能提出同意或反对的有意义的评论</strong></p><p><em>只有当双方都了解对方所说的内容时，关于事实或方向的议题——关于一件事是什么或该如何做的议题——才是真实的</em></p><ol><li><p>偏见与公正</p><p>》〉第一点：因为人有理性的一面，又有动物的一面，所以在争辩时就要注意你会带进去的情绪，或是在当场引发的脾气</p><p><strong>当你的情绪很强烈时，你可能会认为自己很有道理</strong></p><p>》〉第二点：你要把自己的前提或假设摊出来</p><p><strong>一场好的辩论是不会为假设而争吵的</strong></p><p><em>如果你的偏见正好在相反的那一方，而你又不肯承认那就是偏见，你就不能给作者一个公平的机会表达意见了</em></p><p>》〉第三点：派别之争几乎难以避免地会造成一些盲点，要化解这些盲点，应尽力尝试不偏不倚</p><p><strong>如果你不能用同理心来阅读一本书，你的反对意见会更像是争吵，而不是文明的意见交流</strong></p><p><strong>四种评论</strong></p><p>（1）你的知识不足（uninformed）</p><p>（2）你的知识有错误（misinformed）</p><p>（3）你不合逻辑——你的推论无法令人信服</p><p>（4）你的分析不够完整</p></li><li><p>判断作者的论点是否正确</p><p>（1）说一位作者知识不足，就是在说他缺少某些与他想要解决的问题相关的知识。</p><p><strong>似乎时间越久远，知识只有衰退，而毫无增进</strong></p><p>（2）说一位作者的知识错误，就是说他的理念不正确。</p><p><strong>所有可知觉的事物都是有内容及形式所组成的</strong></p><p>（3）说一位作者是不合逻辑的，就是说他的推论荒谬</p><p><strong>荒谬的两种形态</strong></p><p>》〉第一种是缺乏连贯，也就是结论冒出来了，却跟前面所说的理论连不起来</p><p>》〉另一种是事件变化的前后不一致，也就是作者所说的两件事是前后矛盾的</p></li><li><p>判断作者的论述的完整性</p><p><em>讨论作者是否实际完成来他的计划——也就是对于他的工作能否交代的满意度</em></p><p>（4）说一位作者的分析是不完整的，就是说他并没有解决他一开始提出来的所有问题，或是他并没有尽可能善用他手边的资料，或是他并没有看出其间的含义与纵横交错的关系，或是他没法让自己的想法与众不同。</p><p><em>比较每本书里有效而且突出的论点有多少，就可以当作评断其完整性的参考了</em></p><p><strong>突出的词义越多，突出的论述也就越多</strong></p></li><li><p>分析阅读的三阶段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs text">一、分析阅读的第一阶段：找出一本书在谈些什么的规则<br>（1）依照书的种类与主题来分类<br>（2）使用最简短的文字说明整本书在谈些什么<br>（3）将主要部分按顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来<br>（4）确定作者想要解决的问题<br>二、分析阅读的第二阶段：诠释一本书的内容规则<br>（5）诠释作者的关键字，与他达成共识<br>（6）由最重要的句子中，抓住作者的重要主旨<br>（7）知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来<br>（8）确定作者已经解决了哪些问题，还有哪些问题是没解决的。再判断哪些是作者知道他没解决的问题<br>三、分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则<br>A. 智慧礼节的一般规则<br>（9）除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评（在你说出：“我读懂了！”之前，不要说你同意、不同意或暂缓评论。）<br>（10）不要争强好胜，非辩到底不可<br>（11）在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同<br>B.批评观点的特别标准<br>（12）证明作者的知识不足<br>（13）证明作者的知识错误<br>（14）证明作者不合逻辑<br>（15）证明作者的分析与理由是不完整的。<br><br>注意：关于最后这四点，前三点是表示不同意见的准则，如果你无法提出相关的佐证，你就必须同意作者的说法，或至少一部分说法，你只能因为最后一点理由，对本书暂缓评论<br></code></pre></td></tr></table></figure><p><strong>人类发挥心智所完成的作品，如果就其真实性而受到赞美，可说是再也没有比这更高的评价了</strong></p><p><strong>在学习的任何一个阶段，你都要回顾一下这个问题：“这究竟有没有意义？”</strong></p><p><em>规则知识衡量与毒层次的理想标准</em></p><p><em>你是一个好读者，也就能达到你应该达到的阅读层次</em></p><p><strong>一个读得很广泛，却读不精的人，与其值得赞美，不如值得同情</strong></p><blockquote><p>“如果我像一般人一样读那么多书，我就跟他们一样愚蠢了”</p><p>——霍布斯</p></blockquote><p><strong>运用规则，仔细地阅读一本书，而不是浮面地阅读大量的书，就是一个好读者能达到的理想境界了</strong></p><p><strong>要成为一个好读者，就要懂得依照一本书的特质，运用不同的阅读技巧来阅读</strong></p></li></ol><h2 id="辅助阅读"><a href="#辅助阅读" class="headerlink" title="辅助阅读"></a>辅助阅读</h2><p><em>内在阅读（intrinsic reading）：阅读书籍的本身，与所有其他的书都是不相关的</em></p><p><em>外在阅读（extrinsic reading）：借助其他一些书籍来阅读一本书</em></p><p><strong>在理解与批评一本书的过程中，内在与外在的阅读通常会混在一起</strong></p><p><strong>外在辅助来源的四个部分</strong></p><p>》〉第一，相关经验</p><p>》〉第二，其他的书</p><p>》〉第三，导论与摘要</p><p>》》第四，工具书</p><ol><li><p>相关经验的角色</p><p><strong>判断一本小说的写实性，完全要依赖一般的经验</strong></p><p>怎样才能知道你是否适当地运用自己的经验：问问你自己：在你觉得自己了解的某一点上，能不能举出一个实例来？</p></li><li><p>其他的书可以当作阅读时的外在助力</p><p><strong>许多伟大的作品不只是互相有关联，而且在写作时还有特定的先后顺序，这都是不该忽略的事</strong></p><p><strong>后人的作品总是受到前任的影响</strong></p><p><em>外在辅助阅读的主要功用在于延伸与一本书相关的内容脉络</em></p><p><em>我们一定要读与巨著有关的著作，而且要依照写作前后的年表来阅读</em></p></li><li><p>如何运用导读与摘要</p><p><em>运用这些资料时要特别聪明，也就是要尽量少用</em></p><p><strong>理由：</strong></p><p>》〉第一，一本书的导读不一定都是对的。</p><p>》〉第二，就算写对了，可能也不完整。</p><p><strong>外在阅读的规则是除非你看完了一本书，否则不要看某个人的导读</strong></p><p><em>摘录或情结摘要的用途：</em></p><p>》〉第一，如果你已经读过一本书，这些摘要能唤醒你的记忆</p><p>》〉第二，在主题阅读时，摘要的用处很大，你可以因此知道某些特定的议题是与你的主题密切相关的。</p><p><strong>摘要绝不能代替真正的阅读，但有时却能告诉你，你想不想或需不需要读这本书</strong></p></li><li><p>如何运用工具书</p><p><em>工具书主要类型：字典与百科全书</em></p><p><strong>工具书对矫正无知的功能是有限的。那并不能帮助文盲，也不能代替你思考</strong></p><p><em>你的无知就像是为光圈围绕着的黑暗</em></p><p><strong>你一定要能对工具书问一个明智的问题</strong></p><p><em>对一无所知的人来说，工具时可说是毫无用处。工具书并不是茫然无知的指南</em></p></li><li><p>如何使用字典</p><p><em>世上最早的字典是关于荷马书中专门用语的字典</em></p><p><em>《牛津英语词典》开始与1857年</em></p><p><strong>不论字典是如何编辑的，主要目的还是教育的工具</strong></p><p><strong>字典是关于字的一本书，而不是关于事的一本书</strong></p><p><strong>规则：</strong></p><p>（1）文字是物质的——可以写成字，也可以说出声音</p><p>（2）文字是语言的一部分。</p><p>（3）文字是符号——这些符号是有意义的，不止一种意义，而是很多种意义</p><p><em>专有名词与普通名词——根据他们指的是一件事，或是很多的事</em></p><p><em>具体名词或抽象名词——根据他们指的是我们能感知的事，或是一些我们能从心里理解，却无法由外在感知的事</em></p><p>（4）文字是约定俗成的——这是人类创造的符号</p><p><strong>任何人不善读一本字典开头时所作的解释以及所列的缩写符号，那用不好字典只能怪他自己了</strong></p></li><li><p>如何使用百科全书</p><p><em>最早的一本百科全书是由罗马人普林尼（Pliny）编纂的</em></p><p><strong>百科全书和一般光提供讯息的书不同，它所能提供的理解取决于你对这些相关事实之间的关系的了解</strong></p><p><strong>一个读者如果不能善用索引，无法让百科全书为己所用，也只能怪他自己了</strong></p><p><em>百科全书是拿来阅读好书用的——坏书通常用不着百科全书，但是同样的，最聪明的做法是不要被百科全书限制住了</em></p><p><strong>要点：</strong></p><p><em>字典是关于文字的，而百科全书是关于事实的</em></p><p>（1）事实是一种说法（proposition）——说明一个事实时，会用一组文字来表示</p><p>（2）事实是一种“真实”的说法（“True”proposition）——事实不是观点</p><p>（3）事实是真相的反馈——事实可能是&lt;1&gt;一个资讯；&lt;2&gt;不受怀疑的推论</p><p>（4）事实是某种程度上的约定俗成——我们说事实会改变。</p><p><strong>我们一定要承认的是，任何我们认为是真实的主旨，都可能被更有包容力、或更正确的观察与调查证明是错的。与科学有关的事实更是如此</strong></p><p><strong>事实——在某种程度上——也受到文化的影响</strong></p><p><em>百科全书是不记载论点的。除非这个论点已经被广泛接受了，或已成为历史性的趣味话题了</em></p><p><strong>百科全书虽然记载了有关诗集与诗人的事实，但是其中却不包含诗与想象的文学作品</strong></p></li></ol><h1 id="第三篇-阅读不同读物的方法"><a href="#第三篇-阅读不同读物的方法" class="headerlink" title="第三篇 阅读不同读物的方法"></a>第三篇 阅读不同读物的方法</h1><h2 id="如何阅读实用型的书"><a href="#如何阅读实用型的书" class="headerlink" title="如何阅读实用型的书"></a>如何阅读实用型的书</h2><p><strong>越通用的规则，也越容易理解——容易学会与使用这些规则</strong></p><ol><li><p>两种实用性的书</p><p><strong>任何实用性的书都不能解决该书所关心的实际问题</strong></p><p><em>一本理论性的作品可以解决自己提出的问题，但是实际的问题却只能靠行动来解决。</em></p><p><em>如果你的实际问题是如何赚钱谋生，一本教你交朋友的书可以建议你很多事情，但不能替你解决问题。没有任何捷径能解决这个问题，只能靠你自己去赚钱谋生才能解决</em></p><p><strong>是由行动能解决问题。行动只能在现世发生，而不是在书本中发生</strong></p><p><strong>一定要练习特殊的判断力才行</strong></p><p><strong>理论性的原则会归纳出出色的行事规则</strong></p><p><strong>在阅读一本以规则为主的书中，要找寻的主旨当然是那些规则。</strong></p><p><em>如果在原理中能找到可以理解的规则，那么也就可以在由原理引导出来的规则或建议的行动中，找到实用原理的意义</em></p><p><em>在评断一本理论性的书时，读者必须观察他自己与作者之间的原理与假设的一致性或差异性</em></p><p><strong>在评断一本实用性的书时，所有的事都与结果及目标有关</strong></p></li><li><p>说服的角色</p><p><strong>主要问题</strong></p><p>》〉第一：作者的目的是什么？</p><p>》〉第二：他建议用什么方法达到这个目的？</p><p><strong>不想被宣传所迷惑，就得了解宣传的内容是什么</strong></p></li><li><p>赞同实用书之后</p><p><strong>变化</strong></p><p>》〉第一个问题：这本书是在谈些什么？</p><p>》〉第二个问题：为了要能回答关于这本书的意义或内容，你仍然要能够找出作者的共识、主旨与论述。</p><p><strong>找出作者想要你做什么；了解他要你这么做的目的</strong></p><p>》〉第三个问题：内容真实吗？</p><p><em>最主要的却是你能不能接受作者的宗旨——他最终的目标，加上他建议的达成目标的方法——这要看你认为追求的是什么，以及什么才是最好的追求方法而定</em></p><p>》〉第四个问题：这本书与我何干？</p><p><em>如果在阅读一本理论性的书之后，你对那个主题的观点多少有点变化了，你对一般事物的看法也就会多少有些调整。但是这样的调整并不是惊天动地的改变，毕竟，这些调整并不一定需要你探取行动</em></p><p><strong>心理问题会影响我们阅读实用性的作品，因此我们在这里有所讨论。</strong></p></li></ol><h2 id="如何阅读想象文学"><a href="#如何阅读想象文学" class="headerlink" title="如何阅读想象文学"></a>如何阅读想象文学</h2><p><strong>阅读想象文学的问题，比阅读论说性作品的问题更为困难</strong></p><p><strong>要分析美丽，比美丽本书困难多了</strong></p><ol><li><p>读想象文学的“不要”</p><p>》〉论说性作品要传达的是知识——在读者经验中曾经有过或没有过的知识</p><p>》》想象文学是在阐述一个经验本身——那是读者只能借着阅读才能拥有或分享的经验——如果成功了，就带给读者的一种享受。</p><p><strong>（1）不要抗拒想象文学带给你的影响力</strong></p><p><em>阅读论说性的作品，读者应该像个捕食的小鸟，经常保持警觉，随时准备伸出利爪</em></p><p><em>阅读一个故事时，我们要让故事贯穿我们，做任何它想要做的事。我们一定得打开心灵，接纳它</em></p><p><strong>就算我们真的要逃避现实，应该也是逃避到一个更深沉、或更伟大的真实里。</strong></p><p><em>阅读一部伟大的文学作品的规则应该以达成某种深沉的经验为目标</em></p><p><strong>（2）在想象文学中，不要去找共识、主旨或论述</strong></p><blockquote><p>“在诗与戏剧中，叙述是让人更模糊的一种媒介”</p><p>——马克·范多伦</p></blockquote><p><strong>（3）不要用适用于传递知识的，与真理一致的标准来批评小说</strong></p><blockquote><p>“诗与政治对正确的标准是不一致的”</p><p>——亚里士多德</p></blockquote></li><li><p>阅读想象文学的一般规则</p><p>》〉适合阅读小说的规则</p><p>（1）你必须将想象文学作品分类</p><p>（2）你要能抓住整本书的大意</p><p><strong>一篇故事的大意总是在情节之中的</strong></p><p><em>情节代表的是整本作品的大意，而整本作品才是经验本身</em></p><p>（3）你不仅要能将整本书简化为大意，还要能发现整本书各个部分是如何架构起来的</p><p>》〉阅读小说时候的诠释规则</p><p>（1）小说的要素是插曲、事件、角色与他们的思想、言语、感觉及行动</p><p>（2）共识与主旨有关。小说的要素与整个表现的场景或背景有关。</p><p><strong>在这个想象的世界中宾至如归。知道一切事件的进行，就像你亲临现场，身历其境</strong></p><p>（3）如果说论说性作品中有任何活动，那就是论述的发展。由证据与理由到结构的一个逻辑性的演变。</p><blockquote><p>“情节是一个故事的灵魂”</p></blockquote><p><strong>要把一个故事读好，你就要能把手指放在作者的脉搏上，感受到每一次的心跳</strong></p><p><em>在短短的抒情诗中，虽然角色可能非常少，但至少永远有一个角色——诗人本身</em></p><p>》〉小说的阅读批评规则</p><p><strong>在你由衷感激作者试着为你创造的经验之前，不要批评一本想象的作品</strong></p><blockquote><p>“我们要接纳作者的主题、想法与前提。我们所能批评的只是他所创造出来的结果”</p><p>——亨利·詹姆斯《小说的艺术》</p></blockquote><p><strong>对于小说，我们不该反对或赞成，而是喜欢或不喜欢。</strong></p><p><em>你要完成批评这件事，要客观地指出书中某些事件造成你的反感</em></p><p><strong>懂得阅读方法的人，文学品味都很高</strong></p></li></ol><h2 id="阅读故事、戏剧与诗的一些建议"><a href="#阅读故事、戏剧与诗的一些建议" class="headerlink" title="阅读故事、戏剧与诗的一些建议"></a>阅读故事、戏剧与诗的一些建议</h2><p>》〉第一，这整本书的内容是在谈些什么？</p><p><em>就是你能说出关于一个故事、戏剧或诗的情节大意，并要能广泛地包括故事或抒情诗中的动作与变化</em></p><p>》〉第二，内容的细节是什么？是如何表现出来的？</p><p><em>你要能识别剧中所有不同的角色，并用你自己的话重新叙述过发生在他们身上的关键事件</em></p><p>》〉第三，这本书说的是真实的吗？全部真实或部分真实？</p><p><em>你要能合理地评断一本书的真实性</em></p><p>》〉第四，这本书与我何关？</p><blockquote><p>“暴君并不怕唠叨的作家宣扬自由的思想——他害怕一个醉酒的诗人说了一个笑话，吸引了全民的注意力”</p><p>——怀特（E.B.White）</p></blockquote><p><em>所谓“纯”艺术，并不是因为“精致”或“完美”，而是因为作品本身就是一个结束，不再与其他的影响有关</em></p><blockquote><p>“美本身就是存在的唯一理由”</p><p>——爱默生</p></blockquote><p><strong>要把这些文学作品读通，你唯一要做的事就是去感受与体验</strong></p><ol><li><p>如何阅读故事书</p><p><strong>建议：快读，并且全心全意地读</strong></p><p><em>在你了解一个角色为什么要做这件事之前，不要心存疑虑。尽量试着活在他的世界里，而不是你的世界，这样他所做的事就很容易理解了</em></p><p><strong>就算一开始不太清楚，也不要焦虑</strong></p><p><em>故事就像我们的人生一样，在生命中，我们不可能期望了解每一件发生在我们身上的事，或把一生全都看清楚。但是，当我们回顾过去时，我们便了解为什么了。</em></p><p><strong>小说能满足我们潜意识或意识中许多的需要</strong></p><p><strong>我们都希望自己拥有的爱比现在拥有的还要丰富</strong></p><p><em>在故事书中——小说、叙事诗或戏剧——公理正义确实是存在的。</em></p><p><em>大悲剧也是如此。可怕的事情发生在好人身上，我们眼中的英雄不该承受这样的厄运，但最后也只好理解命运的安排</em></p><p><strong>关于悲剧，我们可以分享他的洞察力，却不需要分享他的痛苦遭遇</strong></p></li><li><p>关于史诗的重点</p><p><strong>阅读任何一部重要的史诗，都要求你集中注意力，全心参与并运用想象力</strong></p></li><li><p>如何阅读戏剧</p><p><strong>如果你没有将剧本搬上心灵的舞台演出过，或许你还不能算是读过剧本了。就算你读得再好，也只是读了一部分而已</strong></p><p><em>把剧本大声地读出来倒经常是不错的方法</em></p></li><li><p>关于悲剧的重点</p><p><strong>阅读希腊悲剧的建议：</strong></p><p>》〉第一，记住悲剧的精髓在事件，或是说缺乏事件。</p><p>》》第二，在读悲剧人物的台词时，你要想象这是出自一个大人物的口中，他们不只是在形象上，在实际身高上也高出你一截</p></li><li><p>如何阅读抒情诗</p><p><strong>诗人要向内心深处探索，才能创造出他们的诗句</strong></p><p><em>任何人在任何时间，只要处于孤独又敏感的状态，都可以创造出诗句来</em></p><p><em>抒情诗，任何现代诗，只要你肯拿起来读，你会发现并不像你想的要花那么大的功夫。其次，那绝对是值得你花时间与精力去做的事</em></p><p><strong>阅读抒情诗的规则</strong></p><p>》〉第一：不论你觉得自己懂不懂，都要一口气读完，不要停</p><p>》〉第二：重读一遍——大声读出来</p><blockquote><p><em>莎士比亚的十四行诗，似乎都在谈他所谓的“贪婪的时间”造成的毁坏</em></p><p>”</p><p>​我曾窥见时间之手的残酷</p><p>​被陈腐的岁月掩埋就是辉煌的代价</p><p>“</p><p>……</p><p>”</p><p>​断垣残壁让我再三思量</p><p>​岁月终将夺走我的爱人</p><p>“</p><p>——第64首 （列举了时间战胜了一切，而人们却希望能与时间对抗）</p><p>”</p><p>​爱不受时间愚弄，虽然红唇朱颜</p><p>​敌不过时间舞弄的弯刀；</p><p>​爱却不因短暂的钟声与周期而变貌，</p><p>​直到末日尽头仍然长存</p><p>“</p><p>——第116首</p><p>“</p><p>​我的爱人发誓她是真诚得 </p><p>​我真的相信她，虽然我知道她在说谎，</p><p>“</p><p>——第138首</p></blockquote><blockquote><p>“</p><p>​如果我们拥有全世界的时间，</p><p>​这样的害羞，女郎，绝不是罪过。</p><p>“</p><p>……</p><p>“</p><p>​在我背后我总是听见</p><p>​时间的马车急急逼近；</p><p>​无垠的远方横亘在我们之上</p><p>​辽阔的沙漠永无止境。</p><p>“</p><p>……</p><p>“</p><p>​让我们转动全身的力量</p><p>​让全心的甜蜜融入舞会中，</p><p>​用粗暴的争吵撕裂我们的欢愉</p><p>​彻底的挣脱生命的铁门。</p><p>​这样，虽然我们不能让阳光</p><p>​静止，却能让他飞奔而去。</p><p>“</p><p>——马维尔《致害羞的女主人》</p></blockquote><blockquote><p>“</p><p>​你这里脸孔低垂到太阳之下</p><p>​在这里望向地球正午的最高处</p><p>​感觉到阳光永远的来临</p><p>​黑夜永远升起</p><p>”</p><p>……</p><p>“</p><p>​在这里脸孔沉落到太阳之下</p><p>​感觉到多么快速，多么神秘，</p><p>​夜晚的阴影来临了… …</p><p>“</p><p>——阿契伯·麦克莱西</p></blockquote><p><strong>只要一个人愿意努力，几乎任何人都能读任何诗</strong></p><p><strong>要了解一首诗，一定要去读它——一遍又一遍地读</strong></p><p><strong>伟大的抒情诗值得再三玩味。而在放下这首诗的时候，我们对这首诗所有的体会，可能更超过我们的认知</strong></p></li></ol><h2 id="如何阅读历史书"><a href="#如何阅读历史书" class="headerlink" title="如何阅读历史书"></a>如何阅读历史书</h2><p><em>就事实而言的历史（history as fact）与就书写记录而言的历史（history as written record of  the tacts）是不同的</em></p><ol><li><p>难以捉摸的史实</p><p><em>一个目击者不能假设任何事，不能猜测，不能保证，也不能评估（除非是在非常仔细的情况掌控之下）。当然，他也不可以说谎。</em></p><p><strong>历史学家所关心的是已经发生的事件，而且绝大部分是发生在很久之前的事件</strong></p><p><em>一件历史的“事实”——虽然我们感觉很相信这两个字代表的意义，但却是世上最难以捉摸的</em></p></li><li><p>历史的理论</p><p><strong>历史比较接近小说，而非科学</strong></p><p><strong>你在读历史书时，最基本的认知就是要知道作者在运作的是哪一条路</strong></p><p><em>不想采取这个或那个立场，就得假设人们不会故意为某个目的而做一件事，或者就算有目的，也难以察觉——换句话说，历史根本就没有模式可循</em></p><blockquote><p>列夫托尔斯泰认为，造成人类行为的原因太多，又太复杂，而且动机又深深隐藏在潜意识里，因此我们无法知道为什么会发生某些事</p></blockquote><p><strong>为了追求真相，我们必须从更多不同的角度来观察才行</strong></p></li><li><p>历史中的普遍性</p><blockquote><p>“ 诗笔历史更有哲学性”</p><p>——亚里士多德</p></blockquote><p><em>一本好的历史书仍然是有普遍性的</em></p><blockquote><p>修昔底德说过，他写历史的原因：</p><p>希望经由他所观察到的错误，以及他个人受到的灾难与国家所受到的苦楚，将来的人们不会重蹈覆辙</p></blockquote><p><strong>历史是由古到今的故事。我们感兴趣的是现在——以及未来</strong></p><p><em>有一部分的未来是由现在来决定的</em></p><p><strong>阅读历史的要点：</strong></p><p>》〉第一，对你感兴趣的事件或时期，尽可能阅读一种以上的历史书</p><p>》〉第二，阅读历史时，不只要关心在过去某个时间、地点真正发生了什么事，还要读懂在任何时空之中，尤其是现在，人们为什么会有如此这般行动的原因</p></li><li><p>阅读历史书要提出的问题</p><p><strong>因为历史的特性，我们要提出的问题：</strong></p><p>》〉第一个问题关心的是，每一本历史书都有一个特殊而且限定范围的主题 （这本书是在谈些什么？）</p><p><strong>一位作者不该因为他没有做到他根本就没想到的事情而受到指责</strong></p><p>》〉根据第二个问题，历史书在说一个故事，而这个故事当然是发生在一个特定的时间里 （这本书说的是真实的吗？）</p><p><strong>批评历史的两种方式</strong></p><p><em>我们可以批评——但永远要在我们完全了解书中的意义之后——这本历史书不够逼真</em></p><p><strong>一个好的历史学家要能兼具说故事的人与科学家的能力</strong></p><p><em>我们会认为——尤其是我们对这方面的主题有特殊研究时——作者误用了资料</em></p><p>》〉关于最后一个问题，可能没有任何文学作品能像历史一样影响人类的行为。（这与我何干？）</p><p><strong>历史告诉我们人类过去所做的事，也经常引导我们作改变，尝试表现出更好的自我</strong></p><p><strong>这个世界已经变得渺小又危机四伏，每个人都该开始把历史读好才行</strong></p></li><li><p>如何阅读传记与自传</p><p><strong>传记的类型：</strong></p><p>》〉“定案本”（defintive）：是对一个人的一生作详尽完整的学术性报告，这个人重要到能够得上写这种完结篇的传记</p><p>》〉“授权本”（authorized）：由继承人，或是某个重要人物的朋友来负责。因为他们写作的态度很小心，因此这个人所犯的错，或是达到的成就都会经过润饰。</p><p>》〉一般的传记：介于定案本与授权本之间。在这种传记中，我们希望作者是正确的，是了解事实的。我们最希望的是能超越另一个时空，看到一个人的真实面貌</p><p><strong>人是好奇的动物，尤其是对另一个人特别的好奇</strong></p><p><strong>如果我们对人性感兴趣，在礼盒的限度内，我们在阅读任何一本书的时候，都会张开另一只眼睛，去发现作者个人的影子</strong></p><blockquote><p>“并不是我在塑造我的作品，而是我的作品在塑造我。一本书与作者是合二为一的，与自我密切相关，也是整体生活的一部分”</p><p>“任何人都能从我的书中认识我，也从我身上认识我的书”</p><p>——蒙田</p></blockquote><blockquote><p>“这不只是一本书，接触到这本书时，也就是接触到一个生命”</p><p>——惠特曼谈他的《草叶集》</p></blockquote><p><em>对于任何自传都要有一点怀疑心，同时别忘了，在你还不了解一本书之前，不要妄下论断</em></p><p><strong>传记是有启发性的，那是生命的故事，通常是成功者一生的故事——也可以当作我们生活的指引</strong></p></li><li><p>如何阅读关于当前的事件</p><p><strong>身为一个人及世界的公民，我们有义务去了解围绕在我们身边的世界</strong></p><p><em>理论上，一位记者，不论是那一类的记者，都该像一面清澈的玻璃，让真相反映出来——或投射过来</em></p><p><strong>在阅读当前事件的报道时，要知道是谁在写这篇报导</strong></p><p><strong>与报道现状的作品有关的问题：</strong></p><p>（1）这个作者想证明什么？</p><p>（2）他想要说服谁？</p><p>（3）他具有的特殊知识是什么？</p><p>（4）他使用的特殊语言是什么？</p><p>（5）他真的知道自己在说些什么吗？</p><blockquote><p>“想要知道一个人惯用的假设是极为困难的，所谓‘以教条为事实’，在运用形上学的帮助以及长期苦思之后，你会发现教条就是教条，却绝不是事实”</p><p>——巴兹尔·威利《17世纪背景》</p></blockquote><p><strong>警告：读者要擦亮眼睛（Caveat lector）</strong></p><p><strong>你要搞清楚他们的利益考虑，阅读任何东西都要小心翼翼</strong></p></li><li><p>关于文摘的注意事项</p><p><strong>最好的文章，就像最好的书一样，是不可能经过浓缩而没有遗珠之憾的</strong></p><p><em>浓缩的唯一功能就是激励我们去阅读原著</em></p><p><strong>内容被浓缩得越多，我们对浓缩者得特质就更要有所了解</strong></p><p><em>阅读文摘，有时是最困难又自我要求最多的一种阅读方式</em></p></li></ol><h2 id="如何阅读科学与数学"><a href="#如何阅读科学与数学" class="headerlink" title="如何阅读科学与数学"></a>如何阅读科学与数学</h2><p><em>在科学界，专家透过专业论文来作沟通早已是非常重要的方式，比起写给所有读者的那种传统叙事性的写法，这样的方式更方便彼此的意见交流</em></p><ol><li><p>了解科学这一门行业</p><p><strong>科学史是学术领域中发展最快速的一门学科</strong></p><blockquote><p>“有能力的人，就去做。没有能力的人，就去教”</p><p>——萧伯纳</p></blockquote><p><em>你最少要阅读一些伟大的科学经典巨著</em></p><p><strong>只有当你注意到伟大的科学家想要解决的是什么问题时——注意到问题的本身及问题的背景——你的责任才算结束了</strong></p><p><em>要跟上科学发展的脚步，找出事实、假定、原理与证据之间的相互关联，就是参与了人类理性的活动，而那可能是人类最成功的领域</em></p></li><li><p>阅读科学经典名著的建议</p><p><em>所谓科学作品，就是在某个研究领域中，经过实验或自然观察得来的结果，所写成的研究报告或结论</em></p><p><strong>科学的客观不在于没有最初的偏见，而在于坦白承认</strong></p><p><strong>阅读科学作品的两个主要难题：</strong></p><p>》〉一个是有关论述的问题</p><p>》〉数学的问题</p><p><strong>归纳法是科学的特质</strong></p><p><em>为来了解科学中归纳法的论点，你就必须了解科学家引以为理论基础的证据</em></p><p><strong>你用不着读完所有的细节才能获得启发</strong></p><blockquote><p>“任何自然科学的分支都要包含三个部分：在这个科学主题中的连续事实，呈现这些事实的想法，以及表达这些事实的语言……因为想法是由语言来保留与沟通的，如果我们没法改进科学的本身，就没法促进科学语言的进步。换个角度来看也一样，我们不可能只改进科学的语言或术语，却不改进科学的本身”</p><p>——拉瓦锡</p></blockquote></li><li><p>面对数学的问题</p><p><em>“符号盲”（Symbol blindness）——无法放下对实体的依赖，转而理解在控制之下的符号转换</em></p><p><strong>数学其实是一种语言，我们可以像学习自己的语言一样学习它</strong></p><p><em>在学习自己的语言是，我们要学两次：第一次是学习如何说话，第二次是学习如何阅读。幸运的是，数学只需要学一次，因为它完全是书写的语言</em></p><p><strong>任何一种语言都是一种沟通的媒介，借着语言人们能彼此了解共同的主题</strong></p><p><em>只要能适当地运用数学的共识、主旨与等式，就不会有情绪上言外之意的问题</em></p><p><strong>如果任何人愿意费点力气来读数学，要领略数学之美永远不嫌晚</strong></p><p><em>针对一个真正有范围限制的问题，作出真正逻辑的解释</em></p><blockquote><p><em>三段论法</em></p><p>​所有的动物终有一死；</p><p>​所有的人都是动物；</p><p>​因此，所有的人终有一死。</p></blockquote></li><li><p>掌握科学作品中的数学问题</p><p><strong>说明：</strong></p><p>》〉第一，至少你可以把一些比你想象的基础程度的数学读得更明白</p><p>》〉第二，读一本有数学在内的科学书，跳着略读反而是比较聪明的</p><blockquote><p>希波克拉底的医学观点——<strong>预防胜于治疗的艺术</strong></p></blockquote><p><strong>你的责任不是成为这个主题的专家，而是要去了解相关的问题。</strong></p></li><li><p>关于科普书的重点</p><p><strong>阅读原创性科学巨著的难题：</strong></p><p>》〉第一，他们只谈论一点相关的实验内容（他们只报告出实验的结果）</p><p>》〉第二，内容只包括一点数学（除非是以数学为主的畅销书</p><p><strong>如果我们想要了解我们存活的这个年代，我们就该了解一下数学是什么，数学家是如何运用数学，如何思考的</strong></p><p><em>数学家并不是魔术师，而是个普通的人</em></p></li></ol><h2 id="如何阅读哲学书"><a href="#如何阅读哲学书" class="headerlink" title="如何阅读哲学书"></a>如何阅读哲学书</h2><p><strong>哲学来自怀疑</strong></p><p><em>成人并没有失去好奇心，好奇心似乎是人类的天生特质，但是他们的好奇心在性质上有了转化</em></p><p><strong>最伟大的哲学家所提出来的深刻的问题，正是孩子们所提出的问题</strong></p><p><em>成人复杂的生活阻碍了寻找真理的途径</em></p><p><strong>我们要学习伟大的哲学家，提问题的时候就一定也要有孩子气的单纯——而回答却成熟而睿智</strong></p><ol><li><p>哲学家提出的问题</p><p><strong>“有”或“存在”的问题：</strong></p><ul><li>存在于不存在的区别在哪里？</li><li>所有存在失误的共同点是什么？</li><li>每一种存在事物的特质是什么？</li><li>事物存在的方法是否各有不同——各有不同的存在形式？</li><li>是否某些事物只存在心中，或只为了心灵而存在？</li><li>而存在于心灵之外的其他事物，是否都为我们所知？</li><li>是否所有存在的事物都是具体的，或是在具体物质之外仍然存在着某些事物？</li><li>是否所有的事都会改变，还是有什么事是永恒不变的？</li><li>是否任何事物都有存在的必要？</li><li>还是我们该说：目前存在的事物不见得从来都存在？</li><li>是否可能存在的领域要大于实际存在的领域？</li></ul><p><strong>“改变”或形状有关的问题：</strong></p><ul><li>改变所牵涉到的是什么呢？</li><li>在每一个改变的过程中，是否有什么坚持不变的东西？</li><li>以及这个坚持不变的东西是否有哪些方面还是要遭逢改变？</li><li>是否所有的改变都是如此？</li><li>譬如对于生死这样巨大的改变——也就是存在的来临与消失——是否也是如此？</li><li>还是只对一些不太重要的改变，像某个地区的活动、成长或某种地质上的变动来说，才如此？</li><li>不同的改变到底有多少种？</li><li>是否所有的改变都有同样的基本要素或条件？</li><li>是否所有这些因素或条件都会产生作用？</li><li>我们说造成改变的原因是什么意思呢？</li><li>在改变中是否有不同的原因呢？</li><li>造成改变——或变化的原因，跟造成存在的原因是相同的吗？</li></ul><p><em>那些问题不只关于存在或改变，也包括必然性与偶然性，物质与非物质，自然与非自然，自由与不确定性（indeterminacy），人类心智的力量与人类知识的本质及范围，以及自由意志的问题</em></p><p><strong>“善”与“恶”的问题</strong></p><ul><li>在善与恶之间，是否有普遍被认可的区别？</li><li>无论在任何情况中，是否某些事永远是好的，某些事永远是坏的？</li><li>能将这些善行整理出条理来吗？</li><li>是不是有些善行比另一些更重要？</li><li>是否有些善行要依赖另一些善行来完成？</li><li>某些情况中，是否两种善行会互相抵触，你必须选择一种善行，而放弃另一种？</li></ul><blockquote><p>“没有所谓好跟坏，端看你怎么去想它”</p><p>——《哈姆雷特》引用蒙田的话</p></blockquote><p><strong>两种主要不同的哲学领域：</strong></p><p>〉》第一组，关于存在于变化恶问题，与这个世界上存在与发生的事有关。（理论或思辨型）——理论哲学的领域</p><p>〉》第二组，关于善与恶，好与坏的问题，和我们应该做或探寻的事有关。（实用型）——规范哲学的领域</p></li><li><p>现代哲学与传承</p><p><em>上溯至1930年或稍晚一点，哲学书是为一般读者而写作的。哲学家希望同行会读他们的书，但也希望一般有知识的读者也能读，因为他们所提出的问题，想要回答的问题都是与一般人切身相关的，因此他们认为一般人也应该知道他们的思想。</em></p></li><li><p>哲学的方法</p><p><strong>哲学就是一种思考，别无他物</strong></p><p><strong>观念是不能任意拼凑的</strong></p><p><em>哲学家只是比一般人更深刻的思考有关改变的特质与起因</em></p><p><strong>要回答哲学的问题，除了思考以外，别无他法</strong></p></li><li><p>哲学的风格</p><p><strong>论述的风格：</strong></p><p>（1）哲学对话：第一种哲学的论说形式，虽然并不是很有效，但首次出现在柏拉图的《对话录》（Dialogues）中</p><p>（2）哲学论文或散文：亚里士多德是柏拉图最好的学生，他在柏拉图门下学习了二十年</p><p>（3）面对异议：中世纪发展的哲学风格，以圣托马斯·阿奎那的《神学大全》为极致，兼有前述两者的风貌</p><p><em>哲学中不断提到的问题大部分是柏拉图提出的；我们应该也谈到，苏格拉底在对话过程中问的是那种小孩子才会问的简单又深刻的问题。而亚里士多德，我们也说过，他会指出其他哲学家的不同意见，并作出回应</em></p><p><strong>一个主张要被接受，被当作是真理，就要能接受公开讨论的测试</strong></p><p><strong>哲学家不再是孤独的思考者，而是要在智力的市场上，接受对手的挑战</strong></p><p>（4）哲学系统化：在17世纪，第四种哲学论说形式又发展出来了。主要代表哲学家：笛卡尔与斯宾诺莎。他们着迷于数学如何组织出一个人对自然的知识，因此他们想用类似数学组织的方式，将哲学本身整理出来</p><p>（5）格言形式：是由尼采在他的《查拉图斯特拉如是说》中所采用</p><p><em>用格言的形式来解说哲学，最大的好处在于有启发性</em></p></li><li><p>阅读哲学的提示</p><p><strong>在阅读任何哲学作品时，最重要的就是要发现问题，或是找到书中想要回答的问题</strong></p><p><strong>有关哲学主题的对话，可能是人类所有活动中最重要的一个活动</strong></p><blockquote><p>一个人不论是为了任何理由而拒绝参加追求真理，都是人性最深沉的背叛</p><p>——柏拉图在《理想国》第一卷似乎想说</p></blockquote><p><strong>幸福是善的完整（whole of the good），而不是最高的（highest）善，因为如果是那样，那就只有一种善了</strong></p><p><strong>幸福是一个完整生命的品质</strong></p><p><strong>一个幸福的人，是具现了生命的完整，而且一生都保持这种完整的人</strong></p><p><em>“教条主义”，就是认为只要凭着思考，用不着考虑本身的局限性，人类的知性就可以掌握最重要的真理</em></p><blockquote><p>一贯性”是小智小慧的骗人伎俩“（hobgoblin of little minds）</p></blockquote><p><em>如果哲学家前后说法不一，你就要判断他所说的两个想法中哪一个才是真的——他在前面说的原则，还是最后没有从原则中导引出来的结论？或许你会决定两者都不可信</em></p><p><strong>哲学问题是要去解说事物的本质，而不像科学作品要的是描述事物的本质</strong></p><p><em>你经由感官察觉到的永远是具体与个别的，而你脑中所想的永远是抽象又普遍的</em></p><p><strong>人们总想想象出是什么概念在困扰他们，最后却会对所有抽象的东西感到绝望</strong></p><p><strong>当你越清楚自己的偏见时，你就越不会误判别人的偏见了</strong></p><p><em>哲学家在面对问题时，除了思考以外，什么也不能做。读者在面对一本哲学书时，除了阅读以外，什么也不能做——那也就是说，要运用你的思考。</em></p><p><strong>除了思考本身外，什么任何其他帮助</strong></p></li><li><p>厘清你的思绪</p><p><strong>原因：</strong></p><p>》〉第一，如果这些不同的意见一直存在，可能就指出一个没有解决，或不能解决的大问题</p><p><strong>知道真正的奥秘所在是件好事</strong></p><p>》〉第二，哲学家意见合不合其实并不重要，你的责任只是要厘清自己的思路。</p></li><li><p>关于神学的重点</p><p><strong>类型：</strong></p><p>》〉自然神学（natural theology）：自然神学是哲学的一支，也是形而上学的最后一部分</p><p>》〉教义神学（dogmatic theology）：教义神学永远依赖教义与宣扬教义的宗教权威人士</p><p><em>如果你没有这样的信仰，也不属于某个教派，想要把教义神学的书读好，你就得拿出读数学的精神来读</em></p><p><strong>在有关信仰的文章中，信仰不是一种假设</strong></p><p><em>对有信仰的人来说，那是一种确定的知识，而不是一种实验性的观点</em></p></li><li><p>如何阅读“经书”</p><p><em>任何一个机构——教会、政党或社会——在其他功能之外，如果（1）有教育的功能，（2）有一套要教育的课本（a body of doctrine to teach），（3）有一群虔诚又顺服的成员，那么属于这类组织的成员在阅读的时候都会毕恭毕敬</em></p><p><em>这类作品是一本或唯一的一本正确的读物，阅读任何其他的作品都会带来危机，从考试失去高分到灵魂遭天谴都有可能</em></p><p><strong>一个忠诚的读者在阅读经书时，有义务要从中找到意义，并能从其他的“事实”中举证其真实性</strong></p></li></ol><h2 id="如何阅读社会科学"><a href="#如何阅读社会科学" class="headerlink" title="如何阅读社会科学"></a>如何阅读社会科学</h2><p><em>社会科学作品并不只限定于非小说类</em></p><p><strong>社会科学的成长与普及，最重要的因素是在高中与大专教育中引进了社会科学</strong></p><ol><li><p>什么是社会科学？</p><p><em>社会科学的部门中通常包括了人类学、经济学、政治学与社会学。它们是组成社会科学的核心，几乎所有的社会科学家都会将这些学科归纳进来</em></p></li><li><p>阅读社会科学的容易处</p><p><em>这些作品的内容通常取材自作者所熟悉的经验——在这方面，社会科学就跟诗与哲学一样——论说的方式也经常是叙述式的，这对读过小说与历史的读者来说都很熟悉</em></p><p><strong>发酵的</strong></p><p><strong>对于社会科学所讨论的问题，我们都会有很强烈的意见</strong></p></li><li><p>阅读社会科学的困难处</p><p><strong>如果你拒绝倾听一位作者所说的话，你就无法了解这本书了</strong></p><p><em>如果你在阅读的作品中，作者将一个自己都不太清楚的词句当作是关键字，那你一定也会跟着摸不着头脑的</em></p><p><strong>阅读社会科学作品最困难的地方在于：事实上，在这个领域中的作品是混杂的，而不是纯粹的论说性作品</strong></p></li><li><p>阅读社会科学作品</p><p><strong>在阅读社会科学时，主要的着眼点在一个特殊的事件或问题上，而非一个特殊的作者或一本书</strong></p><p><em>社会科学放在最后，是因为这样的书需要用上主题阅读</em></p></li></ol><h1 id="第四篇-阅读的最终目标"><a href="#第四篇-阅读的最终目标" class="headerlink" title="第四篇 阅读的最终目标"></a>第四篇 阅读的最终目标</h1><h2 id="阅读的第四个层次：主题阅读"><a href="#阅读的第四个层次：主题阅读" class="headerlink" title="阅读的第四个层次：主题阅读"></a>阅读的第四个层次：主题阅读</h2><p>》〉对一个特定的问题来说，所牵涉的绝对不是一本书而已</p><p>》〉要知道就总的来说，应该读的是那些书</p><p><strong>人类的行为，几乎没有任何一种行为没有被称作是爱的行为——只是称呼的方式不同而已</strong></p><p><strong>爱不只限于人类</strong></p><p><strong>存在的事物都可能爱与被爱——或二者兼而有之</strong></p><p><em>碍事一种占有的欲望，通常是性的欲望，也就是说，爱只是一种所有动物在面对异性时会产生的吸引力</em></p><p><strong>在做主题阅读时，会出现一种很矛盾的现象。虽然这个层次的阅读被定义为就同一个主题，阅读两种以上的书，但是换个角度来说，这个主题也是跟着阅读走的，而不是事前就能定出来的</strong></p><ol><li><p>在主题阅读中，检视阅读所扮演的角色</p><p><strong>检视阅读不会让你明白有关主题的所有错综复杂的内容，或是作者所有的洞察力</strong></p><p><strong>两种基本能力：</strong></p><p>》〉第一，它会让你对自己想要研究的主题有个清晰的概念，这样接下来你针对某几本书做分析阅读时，会大有助益</p><p>》〉第二，它会简化你的书目到一个合理的程度</p><p><strong>能够熟练检视阅读的读者会用非常短的时间就发现，这本书谈的内容对他研究的主题到底重不重要</strong></p><p><strong>分析阅读的技巧只适用于单一的作品，主要的目标时要了解这本书</strong></p></li><li><p>主题阅读的五个步骤</p><p>》〉主题阅读步骤1⃣️：找到相关的章节</p><p><strong>在主题阅读中，你及你关心的主题才是基本的重点，而不是你阅读的书</strong></p><p><strong>你的阅读时别有用心的——也就是说，你是为了要解决自己的问题才阅读——而不是为了这本书本身的目的而阅读</strong></p><p><em>要记得你最主要的工作不是理解整本书的内容，而是找出这本书对你的主题有什么帮助，而这可能与作者本身的写作目的相去甚远</em></p><p><strong>在主题阅读中，是书在服务你，而不是你在服务书。主题阅读是最主动的一种阅读法</strong></p><p><em>当然，分析阅读也需要主动的阅读方式。但是你在分析阅读一本书时，你就像是把书当作主人，供他使唤。而你在做主题阅读时，却一定要做书的主人</em></p><p>》〉主题阅读步骤2⃣️：带引作者与你达成共识</p><p><strong>现在你面前的是许多不同的作者，这时候就是要由你来建立起共识，带引你的作者们与你达成共识，而不是你跟着他们走</strong></p><p><strong>真正的困难在于要强迫作者使用你的语言，而不是使用他的语言</strong></p><p><em>我们不只要能够坚决拒绝接受任何一位作者的词汇，还得愿意面对可能没有任何一位作者的词汇对我们来说是有用的事实</em></p><p><strong>主题阅读时一种大量的翻译工作</strong></p><p><em>在进行主题阅读时，我们要建立一组词汇，首先帮助我们了解所有的作者，而不是其中一两个作者；其次帮助我们解决我们的问题</em></p><p>》〉主题阅读步骤3⃣️：厘清问题</p><p><strong>我们得建立起一组不偏不倚的主旨</strong></p><p><em>先列出一些可以把我们的问题说得比较明白的问题，然后让那些作者来回答这些问题</em></p><p><em>这些问题必须要以某种形式，某种秩序说明，以帮助我们解决我们提出的问题，同时这些问题也是要大多数作者都能回答的问题</em></p><p><strong>问题照秩序排列：</strong></p><ol><li>这个问题通常跟我们在研究的概念或现象的<strong>存在</strong>或<strong>特质</strong>有关</li><li>这个问题可能跟这个现象是如何被发现，或这个概念是<strong>如何表现</strong>出来的有关</li><li>这个问题则是与回答前面问题所产生的<strong>影响</strong>有关</li></ol><p>》〉主题阅读步骤4⃣️：界定议题</p><p><em>当两个作者对同一个问题有相当的了解，所作的回答却完全相反或矛盾时，这才是一个真正有参与的议题</em></p><p><strong>答案之不同固然来自于各人对这个主题有不同的观点，但也有很多情况是来自于对问题本身的认知不同</strong></p><p>》〉主题阅读步骤5⃣️：分析讨论</p><p><strong>身为主题阅读的读者，我们的责任不只是要自己回答这些问题——这些问题是我们仔细整理出来，以便易于说明主题的本身与讨论的内容</strong></p></li><li><p>客观的必要性</p><p><strong>同意或反对的意见总是相互并存的</strong></p><p><em>在一个争议性的立场上，我们很少看到一个孤零零的支持者或反对者</em></p><p><strong>人类对任何领域某种事物的特质达成一致的观点，都建立一种假设，意味着他们共同拥有的意见代表着真理</strong></p><p><em>主题阅读的目的，并不是给阅读过程中发展出来的问题提供最终答案，也不是给这个计划开始时候的问题提供最终解答</em></p><p><strong>我们在追求理解的过程中，可以而且应该多贡献一种不同的形式</strong></p><p><strong>“辩证的客观”</strong></p><p><strong>绝对的客观也不是人类能做到的事</strong></p><p><strong>主题阅读的读者必须抗拒一些诱惑，厘清自己的思绪</strong></p><p><em>不断回头参阅诸多作者的原文，重新再阅读相关的章节</em></p><p><strong>主题阅读必须要能不偏不倚地在各种相对立的问题中保持平衡，放下一切偏见，反省自己是否有过与不及的倾向</strong></p></li><li><p>主题阅读的练习实例：进步论</p><p><em>在主题阅读中，要包括小说、戏剧与诗是很困难的</em></p><p><strong>原因：</strong></p><p>》〉第一，故事的精髓在情节，而非对某个议题所秉持的立场</p><p>》〉第二，就算是最能言善道的角色也很少对某个议题清楚表达出立场</p><p><em>大多数作者都用“进步”来指出历史上某种为了促进人类朝向更美好生活的变化，并且既然往更改善的状态的变化是这个概念的基础，那么同样的字眼就不能适用于两种相反概念来</em></p><p><strong>在讨论这些少数作者的观点，就算他们自己运用了“进步”这样的字眼，我们也不能将他们纳入“进步”的概念中</strong></p><p><strong>关于“进步”的问题：</strong></p><p>（1）进步是必要的？还是要取决于其他事件？</p><p>（2）进步会一直无止境地持续下去？还是会走到终点或高原期而消失？</p><p>（3）进步是人类的天性。还是养成的习惯——来自人类动物的本能，或只是外在环境的影响？</p><p><strong>有关进步发生的面向</strong></p><p>（1）知识的进步</p><p>（2）技术的进步</p><p>（3）经济的进步</p><p>（4）政治的进步</p><p>（5）道德的进步</p><p>（6）艺术的进步</p></li><li><p>如何应用主题工具书</p><p><strong>主题工具书能从三个方面帮助开始做研究的人：启动阅读，建议阅读，指导阅读</strong></p><p><em>一旦你开始研究某位作者，就很难不去探索他的上下文</em></p><p><strong>三种不同的方向：</strong></p><p>》〉第一，读者阅读的章节所涉及的主题，能够给他一个诠释这些章节的方向</p><p><strong>三种不同的方向：</strong></p><p>》〉第一，读者阅读的章节所涉及的主题，能够给他一个诠释这些章节的方向</p><p><strong>读者的责任就是要找出这个章节与主题真正相关的地方在哪里</strong></p><p>》〉第二，针对同一个主题，从许多不同的作者与书籍中收集出来的章节，能够帮助读者强化对各个章节的诠释能力</p><p>》〉第三，如果主题阅读运用在许多不同主题之下的时候，当你发现同一个章节被主题工具书引述在许多不同主题之下的时候，这件事情本身就很有指导阅读的效果</p><p><strong>两种主题阅读：</strong></p><p>（1）单独使用的主题阅读</p><p>（2）与主题工具一起并用</p></li><li><p>构成主题阅读的原则</p><p><strong>否认一个概念可以用不同的词汇来说明，就像否认一种语言可以翻译成另一种语言</strong></p><p><strong>困难并不代表做不到</strong></p><p><em>这些问题并非不能克服，如果你觉得无法克服只是在自欺欺人</em></p><p><strong>只要相信翻译是可行的，书与书之间就能彼此对谈。只要愿意这么做，人之间也有理性客观的沟通能力（因为我们能彼此互相学习）</strong></p></li><li><p>主题阅读的精华摘要</p><p><strong>步骤</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、观察研究范围：主题阅读的准备阶段<br>（1）针对你要研究的主题，设计一份实验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引<br>（2）浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念<br>二、主题阅读：阅读所有第一阶段收集到的书籍<br>（1）浏览所有在第一阶段被认定与你主题相关的书，找出最相关的章节<br>（2）根据主题创造出一套中立的词汇，带引作者与你达成共识——无论作者是否实际用到这些词汇，所有的作者，或至少绝大部分的作者都可以用这套词汇来诠释<br>（3）建立一个中立的主旨，列出一连串的问题——无论作者是否明白谈过这些问题，所有的作者，或者至少大多数的作者都要能解读为针对这些问题提供了他们的回答<br>（4）界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列在各个议题之旁。你要记住，各个作者之间或之中，不见得一定存在着某个议题。有时候，你需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能构建出这种议题<br>（5）分析这些讨论。这得把问题和议题按顺序排列，以求突显出题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来<br>注意：理想上，要一直保持对话式的梳理与客观。要做到这一点，每当你要解读某个作家对这个议题的观点时，必须从他自己的文章中引出一段话来并列。<br></code></pre></td></tr></table></figure></li></ol><h2 id="阅读与心智的成长"><a href="#阅读与心智的成长" class="headerlink" title="阅读与心智的成长"></a>阅读与心智的成长</h2><p><strong>阅读时越主动，就读得越好</strong></p><p><em>如果读者阅读了一本实用的书，并接受作者的观点，认同他的建议是适当又有效的，那么读者一定要照着这样的建议行事</em></p><ol><li><p>好书能给我们什么帮助</p><p><em>空有方法却没有可以运用的材料，就和空有材料却没有可以运用的方法一样是毫无用处的</em></p><p><strong>如果你的阅读目的是想变成一个更好的读者，你就不能摸到任何书或文章都读</strong></p><p><strong>你必须能操纵超越你能力的书，阅读超越你头脑的书。只有那样的书能帮助你的思想增长。除非你能增长心智，否则你学不到东西</strong></p><p><em>为了讯息而阅读，就跟为了娱乐阅读一样，没法帮助你心智上的成长</em></p><p><strong>一个好的读者也是自我要求很高的读者</strong></p><p><strong>阅读时很主动，努力不懈</strong></p><p><em>阅读一本烂书也是很困难的事，因为那样的书会抵消你为分析阅读所作的努力，每当你认为能掌握到什么的时候又会溜走</em></p><p><strong>一本烂书根本不值得你花时间去努力，甚至根本不值得作这样的尝试。</strong></p><p><strong>读一本好书的两种回馈：</strong></p><p>》〉第一，当你成功地阅读了一本难读的好书之后，你的阅读技巧必然增进了</p><p>》〉第二——长期来说这一点更重要——一本好书能教你了解这个世界以及你自己</p><p><strong>你会成为一位智者，对人类生命中永恒的真理有更深刻的体认</strong></p><p><em>毕竟，人间有许多问题是没有解决方案的</em></p></li><li><p>书的金字塔</p><p><strong>真理还是真理，只是过去是某一种面貌，现在却呈现出不同的面貌</strong></p><p><em>人类除了心智力量的不同之外，还有许多其他的不同</em></p><p><strong>你该自己去找出对你有特殊价值的书来</strong></p></li><li><p>生命与心智的成长</p><p><strong>测验：</strong></p><p>》〉如果你被警告将在一个无人荒岛度过余生，或至少很长的一段时间，而假设你有时间作一些准备，可以带实际有用的物品到岛上，还能带十本书去，你会选哪十本？</p><p><strong>我们面对的都是同样的挑战——如何找出内在的资源，过更美好的人类生活的挑战</strong></p><p><strong>我们的身体是有限制的，心智却没有限制</strong></p><p><em>随着时间的变化，身体的状况只有越来越恶化，而我们的头脑却能无限地成长与发展下去</em></p><p><strong>我们的心智不会因为到了某个年纪死就停止成长，只有当大脑失去活力，僵化了，才会失去了增加技巧与理解力的力量</strong></p><p><strong>心智就跟肌肉一样，如果不常运用就会萎缩</strong></p><p><em>当我们停止成长时，也就迈向了死亡</em></p><p><strong>好的阅读，也就是主动的阅读，不只是对阅读本身有用，也不只是对我们的工作或事业有帮助，更能帮助我们的心智保持活力与成长</strong></p></li></ol><h1 id="推荐的书籍"><a href="#推荐的书籍" class="headerlink" title="推荐的书籍"></a>推荐的书籍</h1><ul><li><input disabled="" type="checkbox"> 《失乐园》 ——弥尔顿</li><li><input disabled="" type="checkbox"> 《罗马帝国衰亡史》、《罗马帝国衰亡史.第一章：安东尼时代的帝国版图与武力》——吉朋</li><li><input disabled="" type="checkbox"> 《裘利斯 · 凯撒》、《皆大欢喜》、《哈姆雷特》，《十四行诗》——莎士比亚</li><li><input disabled="" type="checkbox"> 《国富论》、《道德情操论》——亚当·斯密</li><li><input disabled="" type="checkbox"> 《波特诺的牢骚》</li><li><input disabled="" type="checkbox"> 《赤裸的午餐》</li><li><input disabled="" type="checkbox"> 《飘》</li><li><input disabled="" type="checkbox"> 《大街》</li><li><input disabled="" type="checkbox"> 《愤怒的葡萄》</li><li><input disabled="" type="checkbox"> 《米德尔顿》</li><li><input disabled="" type="checkbox"> 《安珠玛特病毒》</li><li><input disabled="" type="checkbox"> 《宇宙和爱因斯坦博士》——林肯·巴内特</li><li><input disabled="" type="checkbox"> 《物种起源》、《人类的由来》——达尔文</li><li><input disabled="" type="checkbox"> 《物理之演进》——爱因斯坦、英费尔德</li><li><input disabled="" type="checkbox"> 《几何原理》——欧几里得</li><li><input disabled="" type="checkbox"> 《心理学原理》——威廉·詹姆斯</li><li><input disabled="" type="checkbox"> 《政治学》、《物理学》、《诗学》、《伦理学》、《形而上学》、《工具论——亚里士多德</li><li><input disabled="" type="checkbox"> 《几何学》——笛卡尔</li><li><input disabled="" type="checkbox"> 《几何基础》——希尔伯特</li><li><input disabled="" type="checkbox"> 《上帝之城》——奥古斯丁</li><li><input disabled="" type="checkbox"> 《利维坦》——霍布斯</li><li><input disabled="" type="checkbox"> 《社会契约论》、《忏悔录》——卢梭</li><li><input disabled="" type="checkbox"> 《纯粹理性批判》、《实践理性批判》、《批判力批判》——康德</li><li><input disabled="" type="checkbox"> 《共产党宣言》、《资本论》——马克思</li><li><input disabled="" type="checkbox"> 《人类理解轮》、《论文明政府的起源、扩张与终点》、《论人类悟性》——洛克</li><li><input disabled="" type="checkbox"> 《伦理学》——斯宾诺莎</li><li><input disabled="" type="checkbox"> 《自然哲学的数学原理》、《光学》——牛顿</li><li><input disabled="" type="checkbox"> 《两种新科学》——伽利略</li><li><input disabled="" type="checkbox"> 《奥德赛》、《伊利亚特》——荷马</li><li><input disabled="" type="checkbox"> 《汤姆琼斯》——菲尔丁</li><li><input disabled="" type="checkbox"> 《罪与罚》——陀思妥耶夫斯基</li><li><input disabled="" type="checkbox"> 《尤利西斯》——乔伊斯</li><li><input disabled="" type="checkbox"> 《英国戏剧的不道德与亵渎之一瞥——从古典的观点来探讨》——杰瑞米·科利尔</li><li><input disabled="" type="checkbox"> 《历史》——希罗多德</li><li><input disabled="" type="checkbox"> 《物理世界的本质》——爱丁顿</li><li><input disabled="" type="checkbox"> 《君主论》——马基雅维里</li><li><input disabled="" type="checkbox"> 《神学大全》——圣托马斯·阿奎那</li><li><input disabled="" type="checkbox"> 《心血运动论》——威廉·哈维</li><li><input disabled="" type="checkbox"> 《会饮篇》、《理想国》、《对话录》、《申辩论》、《第七封信》、《诡辩篇》、《理想国》——柏拉图</li><li><input disabled="" type="checkbox"> 《法律的原理》——霍布斯</li><li><input disabled="" type="checkbox"> 《如何思考》——杜威</li><li><input disabled="" type="checkbox"> 《论法的精神》——孟德斯鸠</li><li><input disabled="" type="checkbox"> 《社会契约论》——卢梭</li><li><input disabled="" type="checkbox"> 《人类的生活》——托尔斯泰</li><li><input disabled="" type="checkbox"> 《神曲》——但丁</li><li><input disabled="" type="checkbox"> 《奥赛罗》</li><li><input disabled="" type="checkbox"> 《小说的艺术》——亨利·詹姆斯</li><li><input disabled="" type="checkbox"> 《动物农庄》、《1984》——乔治·奥威尔</li><li><input disabled="" type="checkbox"> 《美丽新世界》——赫胥黎</li><li><input disabled="" type="checkbox"> 《第一圈》——索尔仁尼琴</li><li><input disabled="" type="checkbox"> 《战争与和平》</li><li><input disabled="" type="checkbox"> 《我要知道什么》——舍伍德·安德森</li><li><input disabled="" type="checkbox"> 《埃涅阿斯纪》——维吉尔</li><li><input disabled="" type="checkbox"> 《序曲》——华兹华斯</li><li><input disabled="" type="checkbox"> 《唐璜》——拜伦</li><li><input disabled="" type="checkbox"> 《圣经》</li><li><input disabled="" type="checkbox"> 《汤姆琼斯》——菲尔丁</li><li><input disabled="" type="checkbox"> 《心碎之家》——萧伯纳</li><li><input disabled="" type="checkbox"> 《致害羞的女主人》——马维尔</li><li><input disabled="" type="checkbox"> 《你，安德鲁·马维尔》——阿契伯·麦克莱西</li><li><input disabled="" type="checkbox"> 《约翰逊传》——鲍斯韦尔</li><li><input disabled="" type="checkbox"> 《传记》、《钓客清话》——艾萨克·沃顿</li><li><input disabled="" type="checkbox"> 《发明家法拉第》——约翰·丁达尔</li><li><input disabled="" type="checkbox"> 《希腊罗马名人传》——普鲁塔克</li><li><input disabled="" type="checkbox"> 《忏悔录》——奥古斯丁</li><li><input disabled="" type="checkbox"> 《随笔》——蒙田</li><li><input disabled="" type="checkbox"> 《浮士德》——歌德</li><li><input disabled="" type="checkbox"> 《草叶集》——惠特曼</li><li><input disabled="" type="checkbox"> 《17世纪背景》——巴兹尔·威利</li><li><input disabled="" type="checkbox"> 《化学原理》——拉瓦锡</li><li><input disabled="" type="checkbox"> 《数学入门》——怀特海</li><li><input disabled="" type="checkbox"> 《封闭的循环》——巴瑞·康孟纳</li><li><input disabled="" type="checkbox"> 《查拉图斯特拉如是说》——尼采</li><li><input disabled="" type="checkbox"> 《思想录》——帕斯卡尔</li><li><input disabled="" type="checkbox"> 《物性论》——卢克莱修</li><li><input disabled="" type="checkbox"> 《旧约》</li><li><input disabled="" type="checkbox"> 《新约》</li><li><input disabled="" type="checkbox"> 《古兰经》</li><li><input disabled="" type="checkbox"> 《帕玛修道院》——司汤达</li><li><input disabled="" type="checkbox"> 《魔山》——托马斯·曼</li><li><input disabled="" type="checkbox"> 《西方世界经典名著》*</li><li><input disabled="" type="checkbox"> 《易经》</li><li><input disabled="" type="checkbox"> 《博伽梵歌》</li><li><input disabled="" type="checkbox"> 《英诗金库》、《牛津英诗选》——帕尔格雷夫</li><li><input disabled="" type="checkbox"> 《现代诗一百首》——雷尔登·罗德曼</li><li><input disabled="" type="checkbox"> 《诗歌入门》——马克·范多伦</li><li><input disabled="" type="checkbox"> 《名著入门》**</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="建议阅读的书目"><a href="#建议阅读的书目" class="headerlink" title="建议阅读的书目"></a>建议阅读的书目</h3><p><em>不论基于什么理由，最聪明的做法都是从你最感兴趣的书开始读</em></p><p><strong>主要的目标是要读得好，而不是要读得广</strong></p><p><em>这是一个你可以从容接受的邀请，只要你觉得很自在，任何时候都可以开始</em></p><p><strong>时间能证明一切</strong></p><ol><li>荷马（公元前9世纪？）<ul><li><input disabled="" type="checkbox"> *《伊利亚特》</li><li><input disabled="" type="checkbox"> *《奥德赛》</li></ul></li><li>《旧约》</li><li>埃斯库罗斯（公元前525-前456）<ul><li><input disabled="" type="checkbox"> *悲剧</li></ul></li><li>索福克勒斯（公元前495-前406）<ul><li><input disabled="" type="checkbox"> *悲剧</li></ul></li><li>希罗多德（公元前484-前425）<ul><li><input disabled="" type="checkbox"> *《历史》</li></ul></li><li>欧里庇得斯（公元前485-前406）<ul><li><input disabled="" type="checkbox"> *悲剧</li><li><input disabled="" type="checkbox"> 《美狄亚》</li><li><input disabled="" type="checkbox"> 《希波利图斯》</li><li><input disabled="" type="checkbox"> 《酒神的女祭司们》</li></ul></li><li>修息底德（公元前460-前400）<ul><li><input disabled="" type="checkbox"> *《伯罗奔尼撒战争史》</li></ul></li><li>希波克拉底（公元前460-前377？）<ul><li><input disabled="" type="checkbox"> *医学著作</li></ul></li><li>阿里斯托芬（公元前448-前380）<ul><li><input disabled="" type="checkbox"> *喜剧</li><li><input disabled="" type="checkbox"> 《云》</li><li><input disabled="" type="checkbox"> 《鸟》</li><li><input disabled="" type="checkbox"> 《蛙》</li></ul></li><li>柏拉图（公元前427-前347）<ul><li><input disabled="" type="checkbox"> *对话录</li><li><input disabled="" type="checkbox"> 《理想国》</li><li><input disabled="" type="checkbox"> 《会饮篇》</li><li><input disabled="" type="checkbox"> 《斐多篇》</li><li><input disabled="" type="checkbox"> 《美诺篇》</li><li><input disabled="" type="checkbox"> 《申辩篇》</li><li><input disabled="" type="checkbox"> 《斐德若篇》</li><li><input disabled="" type="checkbox"> 《诡辩篇》</li><li><input disabled="" type="checkbox"> 《高尔吉亚篇》</li><li><input disabled="" type="checkbox"> 《智者篇》</li><li><input disabled="" type="checkbox"> 《泰阿泰德篇》</li></ul></li><li>亚里士多德（公元前384-前322）<ul><li><input disabled="" type="checkbox"> *著作</li><li><input disabled="" type="checkbox"> 《工具论》</li><li><input disabled="" type="checkbox"> 《物理学》</li><li><input disabled="" type="checkbox"> 《形而上学》</li><li><input disabled="" type="checkbox"> 《灵魂篇》</li><li><input disabled="" type="checkbox"> 《尼各马可伦理学》</li><li><input disabled="" type="checkbox"> 《政治学》</li><li><input disabled="" type="checkbox"> 《修辞学》</li><li><input disabled="" type="checkbox"> 《诗学》</li></ul></li><li>**伊壁鸠鲁（公元前341-前270）<ul><li><input disabled="" type="checkbox"> 《致希罗多德的信》</li><li><input disabled="" type="checkbox"> 《致美诺西斯的信》</li></ul></li><li>欧几里得（活跃于公元前300）<ul><li><input disabled="" type="checkbox"> *《几何原理》</li></ul></li><li>阿基米德（公元前287-前212）<ul><li><input disabled="" type="checkbox"> *著作</li><li><input disabled="" type="checkbox"> 《论平面图形的平衡》</li><li><input disabled="" type="checkbox"> 《论浮体》</li><li><input disabled="" type="checkbox"> 《沙粒的计算》</li></ul></li><li>佩尔加的阿波罗尼乌斯（活跃于公元前240）<ul><li><input disabled="" type="checkbox"> *《圆锥曲线论》</li></ul></li><li>**西塞罗（公元前106-前43）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《演说集》</li><li><input disabled="" type="checkbox"> 《论友谊》</li><li><input disabled="" type="checkbox"> 《论老年》</li></ul></li><li>卢克莱修（公元前95-前55）<ul><li><input disabled="" type="checkbox"> *《物性论》</li></ul></li><li>维吉尔（公元前70-前19）<ul><li><input disabled="" type="checkbox"> *著作</li></ul></li><li>贺拉斯（公元前65-前8）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《颂歌与长短句》</li><li><input disabled="" type="checkbox"> 《诗艺》</li></ul></li><li>李维（公元前59-公元17）<ul><li><input disabled="" type="checkbox"> 《罗马史》</li></ul></li><li>奥维德（公元前43-公元17）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《变形记》</li></ul></li><li>**普鲁塔克（公元45-120）<ul><li><input disabled="" type="checkbox"> *《希腊罗马名人传》</li></ul></li><li>**塔西陀（55-117）<ul><li><input disabled="" type="checkbox"> *《历史》</li><li><input disabled="" type="checkbox"> *《编年史》</li><li><input disabled="" type="checkbox"> 《农业志》</li><li><input disabled="" type="checkbox"> 《日耳曼尼亚志》</li></ul></li><li>杰拉什的尼科马库斯（活跃于公元100）<ul><li><input disabled="" type="checkbox"> *《数学入门》</li></ul></li><li>**爱比克泰德（60-120）<ul><li><input disabled="" type="checkbox"> *论说集</li><li><input disabled="" type="checkbox"> 《手册》</li></ul></li><li>托勒密（100-178；活跃于127-151）<ul><li><input disabled="" type="checkbox"> *《天文学大成》</li></ul></li><li>**卢西安（120-190）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《历史写作方法》</li><li><input disabled="" type="checkbox"> 《真实的故事》</li><li><input disabled="" type="checkbox"> 《待售的哲学》</li></ul></li><li>马尔库斯·奥勒留（121-180）<ul><li><input disabled="" type="checkbox"> *《沉思录》</li></ul></li><li>盖伦（130-200）<ul><li><input disabled="" type="checkbox"> *《论自然机能》</li></ul></li><li>《新约》</li><li>普罗提诺（205-270）<ul><li><input disabled="" type="checkbox"> *《九章集》</li></ul></li><li>圣奥古斯丁（354-430）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《论教师》</li><li><input disabled="" type="checkbox"> *《忏悔录》</li><li><input disabled="" type="checkbox"> *《上帝之城》</li><li><input disabled="" type="checkbox"> *《基督教教义》</li></ul></li><li>罗兰之歌（12世纪？）</li><li>尼布龙根之歌（13世纪？）</li><li>萨加（北欧神话）</li><li>托马斯·阿奎那（1225-1274）<ul><li><input disabled="" type="checkbox"> *《神学大全》</li></ul></li><li>**但丁（1265-1321）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《新生》</li><li><input disabled="" type="checkbox"> 《论世界帝国》</li><li><input disabled="" type="checkbox"> 《神曲》</li></ul></li><li>乔叟（1340-1400）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> *《特洛伊罗斯与克里希达》</li><li><input disabled="" type="checkbox"> *《坎特伯雷故事集》</li></ul></li><li>达芬奇（1452-1519）<ul><li><input disabled="" type="checkbox"> 《笔记》</li></ul></li><li>马基雅维里（1469-1527）<ul><li><input disabled="" type="checkbox"> *《君主论》</li><li><input disabled="" type="checkbox"> 《论李维前十书》</li></ul></li><li>伊拉斯谟（1469-1536）<ul><li><input disabled="" type="checkbox"> 《愚人颂》</li></ul></li><li>哥白尼（1473-1543）<ul><li><input disabled="" type="checkbox"> *《天体运行论》</li></ul></li><li>托马斯·莫尔（1478-1535）<ul><li><input disabled="" type="checkbox"> 《乌托邦》</li></ul></li><li>马丁·路德（1483-1546）<ul><li><input disabled="" type="checkbox"> 《三檄文》</li><li><input disabled="" type="checkbox"> 《席间谈》</li></ul></li><li>拉伯雷（1495-1553）<ul><li><input disabled="" type="checkbox"> *《巨人传》</li></ul></li><li>约翰·加尔文（1509-1564）<ul><li><input disabled="" type="checkbox"> 《基督教教义》</li></ul></li><li>蒙田（1533-1592）<ul><li><input disabled="" type="checkbox"> *《随笔》</li></ul></li><li>威廉·吉尔伯特（1540-1603）<ul><li><input disabled="" type="checkbox"> *《磁石论》</li></ul></li><li>塞万提斯（1547-1616）<ul><li><input disabled="" type="checkbox"> *《堂吉诃德》</li></ul></li><li>埃德蒙·斯宾塞（1552-1599）<ul><li><input disabled="" type="checkbox"> 《婚前曲》</li><li><input disabled="" type="checkbox"> 《仙后》</li></ul></li><li>**弗兰克斯·培根（1561-1626）<ul><li><input disabled="" type="checkbox"> 《随笔》</li><li><input disabled="" type="checkbox"> 《学术的进步》</li><li><input disabled="" type="checkbox"> 《新工具》</li><li><input disabled="" type="checkbox"> 《新西大岛》</li></ul></li><li>莎士比亚（1564-1616）<ul><li><input disabled="" type="checkbox"> *著作</li></ul></li><li>**伽利略（1564-1642）<ul><li><input disabled="" type="checkbox"> 《星际使者》</li><li><input disabled="" type="checkbox"> *《论两种新科学及数学演化》</li></ul></li><li>开普勒（1571-1630）<ul><li><input disabled="" type="checkbox"> *《哥白尼天文学概要》</li><li><input disabled="" type="checkbox"> 《论世界的和谐》</li></ul></li><li>威廉·哈维（1578-1657）<ul><li><input disabled="" type="checkbox"> *《动物的心血运行论》</li><li><input disabled="" type="checkbox"> *《论血液循环》</li><li><input disabled="" type="checkbox"> *《论动物的生殖》</li></ul></li><li>托马斯·霍布斯（1588-1679）<ul><li><input disabled="" type="checkbox"> *《利维坦》</li></ul></li><li>勒内·笛卡尔（1596-1650）<ul><li><input disabled="" type="checkbox"> *《指导心智的规则》</li><li><input disabled="" type="checkbox"> *《论方法》</li><li><input disabled="" type="checkbox"> *《几何学》</li><li><input disabled="" type="checkbox"> *《第一哲学沉思录》</li></ul></li><li>约翰·弥尔顿（1608-1674）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> *短诗</li><li><input disabled="" type="checkbox"> *《论出版自由》</li><li><input disabled="" type="checkbox"> *《失乐园》</li><li><input disabled="" type="checkbox"> *《力士参孙》</li></ul></li><li>**莫里哀（1622-1673）<ul><li><input disabled="" type="checkbox"> 喜剧</li><li><input disabled="" type="checkbox"> 《守财奴》</li><li><input disabled="" type="checkbox"> 《太太学堂》</li><li><input disabled="" type="checkbox"> 《恨世者》</li><li><input disabled="" type="checkbox"> 《讨厌自己的医生》</li><li><input disabled="" type="checkbox"> 《答丢夫》</li></ul></li><li>帕斯卡（1623-1662）<ul><li><input disabled="" type="checkbox"> *《致外省人信札》</li><li><input disabled="" type="checkbox"> *《思想录》</li><li><input disabled="" type="checkbox"> *《科学论文》</li></ul></li><li>克里斯蒂安·惠更斯（1629-1695）<ul><li><input disabled="" type="checkbox"> *《光学论》</li></ul></li><li>斯宾诺莎（1632-1704）<ul><li><input disabled="" type="checkbox"> *《伦理学》</li></ul></li><li>约翰·洛克（1632-1704）<ul><li><input disabled="" type="checkbox"> *《论宽容》</li><li><input disabled="" type="checkbox"> *《政府论》</li><li><input disabled="" type="checkbox"> *《人类理解论》</li></ul></li><li>让-巴蒂斯特·拉辛（1639-1699）<ul><li><input disabled="" type="checkbox"> 悲剧</li><li><input disabled="" type="checkbox"> 《昂朵马格》</li><li><input disabled="" type="checkbox"> 《费德尔》</li></ul></li><li>牛顿（1642-1727）<ul><li><input disabled="" type="checkbox"> *《自然哲学的数学原理》</li><li><input disabled="" type="checkbox"> *《光学》</li></ul></li><li>莱布尼茨（1646-1716）<ul><li><input disabled="" type="checkbox"> 《形而上学序论》</li><li><input disabled="" type="checkbox"> 《人类理智新论》</li><li><input disabled="" type="checkbox"> 《单子论》</li></ul></li><li>*丹尼尔·笛福（1660-1731）<ul><li><input checked="" disabled="" type="checkbox"> 《鲁滨逊漂流记》</li></ul></li><li>**乔纳森·斯威夫特（1667-1745）<ul><li><input disabled="" type="checkbox"> 《木桶的故事》</li><li><input disabled="" type="checkbox"> 《致斯黛拉小札》</li><li><input checked="" disabled="" type="checkbox"> *《格列弗游记》</li><li><input disabled="" type="checkbox"> 《一个小小的建议》</li></ul></li><li>威廉·康格里夫（1670-1729）<ul><li><input disabled="" type="checkbox"> 《如此世道》</li></ul></li><li>乔治·贝克莱<ul><li><input disabled="" type="checkbox"> *《人类知识原理》</li></ul></li><li>亚历山大·蒲伯（1688-1744）<ul><li><input disabled="" type="checkbox"> 《论批评》</li><li><input disabled="" type="checkbox"> 《鬈发历劫记》</li><li><input disabled="" type="checkbox"> 《论人》</li></ul></li><li>孟德斯鸠（1689-1755）<ul><li><input disabled="" type="checkbox"> 《波斯人信札》</li><li><input disabled="" type="checkbox"> *《论法的精神》</li></ul></li><li>**伏尔泰（1694-1778）<ul><li><input disabled="" type="checkbox"> 英国书简》</li><li><input disabled="" type="checkbox"> 《赣第德》</li><li><input disabled="" type="checkbox"> 《哲学词典》</li></ul></li><li>亨利·菲尔丁（1707-1754）<ul><li><input disabled="" type="checkbox"> 《约瑟夫·安德鲁斯》</li><li><input disabled="" type="checkbox"> *《汤姆·琼斯》</li></ul></li><li>**塞缪尔·约翰逊（1709-1784）<ul><li><input disabled="" type="checkbox"> 《人类希望的虚妄）</li><li><input disabled="" type="checkbox"> 《英语词典</li><li><input disabled="" type="checkbox"> 《拉塞拉斯》</li><li><input disabled="" type="checkbox"> 《诗人传》</li></ul></li><li>**大卫·休谟（1711-1776）<ul><li><input disabled="" type="checkbox"> 《人性论》</li><li><input disabled="" type="checkbox"> 《道德和政治论文集》</li><li><input disabled="" type="checkbox"> *《人类理解研究》</li></ul></li><li>让-雅克·卢梭（1712-1778）<ul><li><input disabled="" type="checkbox"> *《论人类不平等的起源和基础》</li><li><input disabled="" type="checkbox"> *《论政治经济学》</li><li><input disabled="" type="checkbox"> 《爱弥儿》</li><li><input disabled="" type="checkbox"> *《社会契约论》</li></ul></li><li>劳伦斯·斯特恩（1717-1768）<ul><li><input disabled="" type="checkbox"> *《特里斯特拉姆·香第》</li><li><input disabled="" type="checkbox"> 《多情客游记》</li></ul></li><li>亚当·斯密（1723-1790）<ul><li><input disabled="" type="checkbox"> 《道德情操论》</li><li><input disabled="" type="checkbox"> *《国富论》</li></ul></li><li>康德（1724-1804）<ul><li><input disabled="" type="checkbox"> *《纯粹理性批判》</li><li><input disabled="" type="checkbox"> *《道德形而上学原理》</li><li><input disabled="" type="checkbox"> *《实践理性批判》</li><li><input disabled="" type="checkbox"> *《法的形而上学原理：权利的科学》</li><li><input disabled="" type="checkbox"> *《判断力批判》</li><li><input disabled="" type="checkbox"> 《永久和平论》</li></ul></li><li>爱德华·吉朋（1737-1794）<ul><li><input disabled="" type="checkbox"> *《罗马帝国衰亡史》</li><li><input disabled="" type="checkbox"> *《自传》</li></ul></li><li>詹姆斯·鲍斯韦尔（1740-1795）<ul><li><input disabled="" type="checkbox"> 《日记》</li><li><input disabled="" type="checkbox"> 伦敦日记</li><li><input disabled="" type="checkbox"> *《约翰逊博士传》</li></ul></li><li>拉瓦锡（1743-1794）<ul><li><input disabled="" type="checkbox"> *《化学原理》</li></ul></li><li>约翰·杰（1745-1829）、詹姆斯·麦迪逊（1751-1836）、亚历山大·汉密尔顿（1757-1804）<ul><li><input disabled="" type="checkbox"> *《联邦党人文集》</li><li><input disabled="" type="checkbox"> 《联邦永久联合条例》</li><li><input disabled="" type="checkbox"> 《美国宪法》</li><li><input disabled="" type="checkbox"> 《独立宣言</li></ul></li><li>杰里米·边沁（1748-1832）<ul><li><input disabled="" type="checkbox"> 《道德与立法原理导论》</li><li><input disabled="" type="checkbox"> 《虚构理论》</li></ul></li><li>歌德（1749-1832）<ul><li><input disabled="" type="checkbox"> *《浮士德》</li><li><input disabled="" type="checkbox"> 《诗与真》</li></ul></li><li>让-巴普蒂斯特·约瑟夫·傅立叶（1768-1830）<ul><li><input disabled="" type="checkbox"> *《热的分析理论》</li></ul></li><li>黑格尔（1770-1831）<ul><li><input disabled="" type="checkbox"> 《精神现象学》</li><li><input disabled="" type="checkbox"> *《法哲学原理》</li><li><input disabled="" type="checkbox"> *《历史哲学讲演录》</li></ul></li><li>威廉·华兹华斯（1770-1850）<ul><li><input disabled="" type="checkbox"> 诗</li><li><input disabled="" type="checkbox"> 《抒情歌谣集》</li><li><input disabled="" type="checkbox"> 《露茜组诗》</li><li><input disabled="" type="checkbox"> 《十四行诗》</li><li><input disabled="" type="checkbox"> 《序曲》</li></ul></li><li>塞缪尔·柯勒律治（1772-1834）<ul><li><input disabled="" type="checkbox"> 诗</li><li><input disabled="" type="checkbox"> 《忽必烈汗》</li><li><input disabled="" type="checkbox"> 《古舟子咏》</li><li><input disabled="" type="checkbox"> 《文学传记》</li></ul></li><li>简·奥斯丁<ul><li><input checked="" disabled="" type="checkbox"> 《傲慢与偏见</li></ul></li><li>**卡尔·冯·克劳塞维茨（1780-1831）<ul><li><input disabled="" type="checkbox"> 《战争论》</li></ul></li><li>司汤达（1783-1842）<ul><li><input checked="" disabled="" type="checkbox"> 《红与黑》</li><li><input disabled="" type="checkbox"> 《帕玛修道院》</li><li><input disabled="" type="checkbox"> 《爱情论》</li></ul></li><li>拜伦（1788-1824）<ul><li><input disabled="" type="checkbox"> 《唐璜》</li></ul></li><li>**叔本华（1788-1860）<ul><li><input disabled="" type="checkbox"> 《悲观论集》</li></ul></li><li>**法拉第（1791-1867）<ul><li><input disabled="" type="checkbox"> 《蜡烛的化学史》</li><li><input disabled="" type="checkbox"> *《电学实验研究》</li></ul></li><li>**查尔斯·莱尔（1797-1875）<ul><li><input disabled="" type="checkbox"> 《地质学原理》</li></ul></li><li>奥古斯特·孔德（1798-1857）<ul><li><input disabled="" type="checkbox"> 《实证哲学》</li></ul></li><li>**巴尔扎克（1799-1850）<ul><li><input checked="" disabled="" type="checkbox"> 《高老头》</li><li><input checked="" disabled="" type="checkbox"> 《欧也妮·葛朗台》</li></ul></li><li>**拉尔夫·瓦尔多·爱默生（1803-1882）<ul><li><input disabled="" type="checkbox"> 《代表人物》</li><li><input disabled="" type="checkbox"> 《随笔》</li><li><input disabled="" type="checkbox"> 《日记》</li></ul></li><li>**纳撒尼尔·霍桑（1804-1864）<ul><li><input disabled="" type="checkbox"> 《红字》</li></ul></li><li>**阿列克西·德·托克维尔（1805-1873）<ul><li><input disabled="" type="checkbox"> 《论美国民主》</li></ul></li><li>**约翰·斯图尔特·密尔（1806-1873）<ul><li><input disabled="" type="checkbox"> 《逻辑体系》</li><li><input disabled="" type="checkbox"> *《论自由》</li><li><input disabled="" type="checkbox"> *《代议制政府》</li><li><input disabled="" type="checkbox"> *《功利主义》</li><li><input disabled="" type="checkbox"> 《论妇女的屈从地位》</li><li><input disabled="" type="checkbox"> 《自传》</li></ul></li><li>**查尔斯·达尔文（1809-1882）<ul><li><input checked="" disabled="" type="checkbox"> *《物种起源》</li><li><input disabled="" type="checkbox"> *《人类的由来》</li><li><input disabled="" type="checkbox"> 《自传》</li></ul></li><li>**查尔斯·狄更斯（1812-1870）<ul><li><input disabled="" type="checkbox"> 著作</li><li><input disabled="" type="checkbox"> 《匹克威克外传》</li><li><input checked="" disabled="" type="checkbox"> 《大卫·科波菲尔》</li><li><input disabled="" type="checkbox"> 《艰难时世》</li></ul></li><li>**克劳德·贝尔纳（1813-1878）<ul><li><input disabled="" type="checkbox"> 《实验医学研究导论》</li></ul></li><li>**亨利·大卫·梭罗<ul><li><input disabled="" type="checkbox"> 《论公民的不顺从》</li><li><input checked="" disabled="" type="checkbox"> 《瓦尔登湖》</li></ul></li><li>卡尔·马克思（1818-1883）<ul><li><input checked="" disabled="" type="checkbox"> *《资本论》</li><li><input checked="" disabled="" type="checkbox"> 《共产党宣言》</li></ul></li><li>乔治·爱略特（1819-1880）<ul><li><input disabled="" type="checkbox"> 《亚当·贝德》</li><li><input disabled="" type="checkbox"> 《米德尔马契》</li></ul></li><li>**赫尔曼·麦尔维尔（1819-1891）<ul><li><input disabled="" type="checkbox"> *《莫比·迪克（白鲸记）</li><li><input disabled="" type="checkbox"> 《比利·巴德》</li></ul></li><li>**陀思妥耶夫斯基（1821-1880）<ul><li><input checked="" disabled="" type="checkbox"> 《罪与罚》</li><li><input disabled="" type="checkbox"> 《白痴》</li><li><input checked="" disabled="" type="checkbox"> *《卡拉马佐夫兄弟》</li></ul></li><li>**古斯塔夫·福楼拜（1821-1880）<ul><li><input checked="" disabled="" type="checkbox"> 《包法利夫人》</li><li><input disabled="" type="checkbox"> 《三故事》</li></ul></li><li>**亨利克·易卜生（1828-1906）<ul><li><input disabled="" type="checkbox"> 戏剧</li><li><input checked="" disabled="" type="checkbox"> 《海达·高布乐》</li><li><input checked="" disabled="" type="checkbox"> 《玩偶之家》</li><li><input checked="" disabled="" type="checkbox"> 《野鸭》</li></ul></li><li>**列夫·托尔斯泰（1828-1910）<ul><li><input checked="" disabled="" type="checkbox"> *《战争与和平》</li><li><input checked="" disabled="" type="checkbox"> 《安娜·卡列尼娜》</li><li><input checked="" disabled="" type="checkbox"> 《何谓艺术？》</li><li><input checked="" disabled="" type="checkbox"> 《二十三个故事》</li></ul></li><li>**马克·吐温（1835-1910）<ul><li><input disabled="" type="checkbox"> 《哈克贝利·芬历险记》</li><li><input disabled="" type="checkbox"> 《神秘陌生人》</li></ul></li><li>**威廉·詹姆斯（1842-1910）<ul><li><input disabled="" type="checkbox"> *《心理学原理》</li><li><input disabled="" type="checkbox"> 《宗教经验之种种》</li><li><input disabled="" type="checkbox"> 《实用主义》</li><li><input disabled="" type="checkbox"> 《彻底经验主义论文集》</li></ul></li><li>**亨利·詹姆斯（1843-1916）<ul><li><input disabled="" type="checkbox"> 《美国人》</li><li><input disabled="" type="checkbox"> 《奉使记》</li></ul></li><li>尼采（1844-1900）<ul><li><input disabled="" type="checkbox"> 《查拉图斯特拉如是说》</li><li><input disabled="" type="checkbox"> 《超越善恶》</li><li><input disabled="" type="checkbox"> 《道德谱系学》</li><li><input disabled="" type="checkbox"> 《强力意志》</li></ul></li><li>朱尔·亨利·彭佳勒（1854-1912）<ul><li><input disabled="" type="checkbox"> 《科学与假设》</li><li><input disabled="" type="checkbox"> 《科学与方法》</li></ul></li><li>西格蒙德·弗洛伊德（1856-1939）<ul><li><input disabled="" type="checkbox"> *《释梦》</li><li><input disabled="" type="checkbox"> *《精神分析引论》</li><li><input disabled="" type="checkbox"> *《文明及其不满》</li><li><input disabled="" type="checkbox"> *《精神分析引论新编》</li></ul></li><li>肖伯纳（1856-1950）<ul><li><input disabled="" type="checkbox"> 戏剧（及前沿</li><li><input disabled="" type="checkbox"> 《人与超人》</li><li><input disabled="" type="checkbox"> 《芭芭拉少校》</li><li><input disabled="" type="checkbox"> 《凯撒和克里奥佩特拉》</li><li><input disabled="" type="checkbox"> 《卖花女》</li><li><input checked="" disabled="" type="checkbox"> 《圣女贞德》</li></ul></li><li>**马克思·普朗克（1858-1947）<ul><li><input disabled="" type="checkbox"> 《量子理论的起源和发展》</li><li><input disabled="" type="checkbox"> 《科学往何处去？》</li><li><input disabled="" type="checkbox"> 《科学自传》</li></ul></li><li>**亨利·柏格森（1858-1941）<ul><li><input disabled="" type="checkbox"> 《时间与自由意志》</li><li><input disabled="" type="checkbox"> 《物质与记忆》</li><li><input disabled="" type="checkbox"> 《创造进化论》</li><li><input disabled="" type="checkbox"> 《道德和宗教的两个来源》</li></ul></li><li>**约翰·杜威（1859-1952）<ul><li><input disabled="" type="checkbox"> 《我们怎样思想？》</li><li><input disabled="" type="checkbox"> 《民主与教育》</li><li><input disabled="" type="checkbox"> 《经验与自然》</li><li><input disabled="" type="checkbox"> 《逻辑：探索的理论》</li></ul></li><li>**阿尔弗雷塞·诺思·怀特海（1861-1947）<ul><li><input disabled="" type="checkbox"> 《数学导论》</li><li><input disabled="" type="checkbox"> 《科学与近代世界》</li><li><input disabled="" type="checkbox"> 《教育的目标及其他论文》</li><li><input disabled="" type="checkbox"> 《观念的探险》</li></ul></li><li>**乔治·桑塔亚那（1863-1952）<ul><li><input disabled="" type="checkbox"> 《理性的生活》</li><li><input disabled="" type="checkbox"> 《怀疑主义与动物信仰》</li><li><input disabled="" type="checkbox"> 《人与地》</li></ul></li><li>尼古拉·列宁（1870-1924）<ul><li><input disabled="" type="checkbox"> 《国家与革命》</li></ul></li><li>普鲁斯特（1871-1922）<ul><li><input checked="" disabled="" type="checkbox"> 《追忆似水年华》</li></ul></li><li>**伯特兰·罗素（1872-1970）<ul><li><input disabled="" type="checkbox"> 《哲学问题》</li><li><input disabled="" type="checkbox"> 《心的分析》</li><li><input disabled="" type="checkbox"> 《意义和真理的探究》</li><li><input disabled="" type="checkbox"> 《人类知识：其范围和限度》</li></ul></li><li>**托马斯·曼（1875-1955）<ul><li><input disabled="" type="checkbox"> 《魔山》</li><li><input disabled="" type="checkbox"> 《约瑟夫和他的兄弟们》</li></ul></li><li>**阿尔伯特·爱因斯坦（1879-1955）<ul><li><input disabled="" type="checkbox"> 《相对论的意义》</li><li><input disabled="" type="checkbox"> 《论理论物理学的方法》</li><li><input disabled="" type="checkbox"> 《物理学的进化》（与L·英菲尔德合著）</li></ul></li><li>**詹姆斯·乔伊斯（1882-1941）<ul><li><input disabled="" type="checkbox"> 《都柏林人》</li><li><input disabled="" type="checkbox"> 《死者》</li><li><input checked="" disabled="" type="checkbox"> 《一个青年艺术家的画像》</li></ul></li><li>雅克·马利坦（1882-1973）<ul><li><input disabled="" type="checkbox"> 《艺术与经院哲学》</li><li><input disabled="" type="checkbox"> 《知识的等级》</li><li><input disabled="" type="checkbox"> 《人权和自然法》</li><li><input disabled="" type="checkbox"> 《真正的人道主义》</li></ul></li><li>弗朗兹·卡夫卡（1883-1924）<ul><li><input disabled="" type="checkbox"> 《审判》</li><li><input disabled="" type="checkbox"> 《城堡》</li></ul></li><li>阿诺德·汤因比（1889-1975）<ul><li><input disabled="" type="checkbox"> 《历史研究》</li><li><input disabled="" type="checkbox"> 《文明在考验中》</li></ul></li><li>让-保罗·萨特（1905-1980）<ul><li><input disabled="" type="checkbox"> 《恶心》</li><li><input disabled="" type="checkbox"> 《无处可逃》</li><li><input disabled="" type="checkbox"> 《存在与虚无》</li></ul></li><li>索尔仁尼琴（1918-2008）<ul><li><input disabled="" type="checkbox"> 《第一圈》</li><li><input disabled="" type="checkbox"> 《癌病房》</li></ul></li></ol><h3 id="四种层次阅读的练习与检测"><a href="#四种层次阅读的练习与检测" class="headerlink" title="四种层次阅读的练习与检测"></a>四种层次阅读的练习与检测</h3><ol><li><p>密尔</p><p>“假设你生命中所有的目标都实现了，假设所有你期望的制度与思想的改变在此刻都发生了，这对你来说是不是极大的喜悦与幸福？”</p></li><li><p>牛顿</p><p>“我并不知道我在世人眼中是什么模样，对我自己来说，我似乎只像是一个在海边玩耍的男孩，不时找一颗平滑的卵石，或比较美丽的贝壳取悦一下自己，而真理的大海则横陈在我面前，一无发现”</p></li><li><p>但丁</p><p>《神曲》</p><p>地狱篇 九层</p><p>炼狱篇 七崖</p><p>天堂篇 九个行星</p></li><li><p>达尔文</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">每一物种所产生的个体，远远超过其可能生存的个体，因而便反复引起生存斗争，于是任何生物所发生的变异，无论多么微小，只要在复杂而时常变化的生活条件下以任何方式有利于自身，就会有较好的生存机会，这样便被自然选择了。根据强有力的遗传原理，任何被选择下来的变种都会有繁殖其变异了的新类型的倾向<br></code></pre></td></tr></table></figure></li><li><p>亚里士多德《政治学》</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">我们看到，所有城邦都是某种共同体，所有共同体都是为着某种善而建立的（因为人的一切行为都是为着他们所认为的善），很显然，既然所有共同体都在追求某种善，所有共同体中最高的并且包含了一切其他共同体的共同体，所追求的就一定是最高的善。那就是所谓的城邦或政治共同体 <span class="hljs-params">...</span><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure></li><li><p>卢梭《社会契约论》</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">人是生而自由的，但到处都受着束缚。<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;问题是在找出一种团结，能以社会的全力保护每个分子的生命财产，同时每个分子一方面与全体相结合，一方面仍然可以只服从他自己并仍然和从前一样自由&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;我们每个人都把自身和一切权利交给公共，受公意之最高的指挥，我们对于每个分子都作为全体之不可分的部分看待&quot;</span><br></code></pre></td></tr></table></figure><p><strong>国家只是手段，而非目标</strong></p><p><strong>人并非为国家而生，国家却是为人而设立的</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活类书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重启dptech防火墙</title>
    <link href="/DingFengBo/2023/05/12/%E9%87%8D%E5%90%AFdptech%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/DingFengBo/2023/05/12/%E9%87%8D%E5%90%AFdptech%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<ol><li><p>下载串口工具 如windterm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install windterm<br><br>bit rate  9600 <br>data bit 8 <br>checksum 8<br>stop bit 1<br></code></pre></td></tr></table></figure></li><li><p>use连接串口线</p></li><li><p>新建串口会话（Serial）</p><p>（1）串口：tty</p><p>（2）数据：text</p><p>（3）字符集：</p></li><li><p>命令重启（shutdown）</p></li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[DPTECH]</span>int<br><span class="hljs-selector-attr">[DPTECH]</span>interface gige0_3<br><span class="hljs-selector-attr">[DPTECH-qige0 3]</span>no shutdown<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript入门基础</title>
    <link href="/DingFengBo/2023/05/04/TypeScript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/DingFengBo/2023/05/04/TypeScript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>TypeScript是由微软开发的自由开源的编程语言。它是JavaScript的超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程</p></blockquote><h3 id="运行ts"><a href="#运行ts" class="headerlink" title="运行ts"></a>运行ts</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g typescript <span class="hljs-comment"># 安装</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tsc helloworld.ts <span class="hljs-comment">#编译 helloworld.ts =&gt; helloworld.js</span></span><br></code></pre></td></tr></table></figure><h3 id="TypeScript基础类型"><a href="#TypeScript基础类型" class="headerlink" title="TypeScript基础类型"></a>TypeScript基础类型</h3><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Boolean类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">isDone</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// ES5: var isDone = false;</span><br></code></pre></td></tr></table></figure><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Number类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">//ES5: var count = 10;</span><br></code></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// String类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;fyCoder&#x27;</span>; <span class="hljs-comment">// ES5: var name = &#x27;fycoder&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Array类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//ES5: var list = [1,2,3]; </span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//Array&lt;number&gt;泛型语法 //ES5: var list = [1,2,3]</span><br></code></pre></td></tr></table></figure><h4 id="Enum-枚举-类型"><a href="#Enum-枚举-类型" class="headerlink" title="Enum(枚举)类型"></a>Enum(枚举)类型</h4><h5 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数字枚举</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<span class="hljs-variable constant_">NORTH</span> = <span class="hljs-number">3</span>,<span class="hljs-variable constant_">SOUTH</span>,<span class="hljs-variable constant_">EAST</span>,<span class="hljs-variable constant_">WEST</span>,&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">dir</span>:<span class="hljs-title class_">Direction</span> = <span class="hljs-title class_">Direction</span>.<span class="hljs-property">NORTH</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    ES5:  </span><br><span class="hljs-comment">    &quot;use strict&quot;;</span><br><span class="hljs-comment">    var Direction;</span><br><span class="hljs-comment">    (function (Direction) &#123;</span><br><span class="hljs-comment">        Direction[Direction[&quot;NORTH&quot;] = 3] = &quot;NORTH&quot;;</span><br><span class="hljs-comment">        Direction[Direction[&quot;SOUTH&quot;] = 4] = &quot;SOUTH&quot;;</span><br><span class="hljs-comment">        Direction[Direction[&quot;EAST&quot;] = 5] = &quot;EAST&quot;;</span><br><span class="hljs-comment">        Direction[Direction[&quot;WEST&quot;] = 6] = &quot;WEST&quot;;</span><br><span class="hljs-comment">    &#125;)(Direction || (Direction = &#123;&#125;));</span><br><span class="hljs-comment">    var dir = Direction.NORTH;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 字符串枚举</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;  <span class="hljs-variable constant_">NORTH</span> = <span class="hljs-string">&quot;NORTH&quot;</span>,  <span class="hljs-variable constant_">SOUTH</span> = <span class="hljs-string">&quot;SOUTH&quot;</span>,  <span class="hljs-variable constant_">EAST</span> = <span class="hljs-string">&quot;EAST&quot;</span>,  <span class="hljs-variable constant_">WEST</span> = <span class="hljs-string">&quot;WEST&quot;</span>,&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    ES5:</span><br><span class="hljs-comment">    &quot;use strict&quot;;</span><br><span class="hljs-comment">    var Direction;</span><br><span class="hljs-comment">    (function (Direction) &#123;</span><br><span class="hljs-comment">        Direction[&quot;NORTH&quot;] = &quot;NORTH&quot;;</span><br><span class="hljs-comment">        Direction[&quot;SOUTH&quot;] = &quot;SOUTH&quot;;</span><br><span class="hljs-comment">        Direction[&quot;EAST&quot;] = &quot;EAST&quot;;</span><br><span class="hljs-comment">        Direction[&quot;WEST&quot;] = &quot;WEST&quot;;</span><br><span class="hljs-comment">    &#125;)(Direction || (Direction = &#123;&#125;));</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h5><p><em>异构枚举的成员值是数字和字符串的混合</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 异构枚举 （数字枚举相对字符串枚举多了“反向映射”）</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Enum</span> &#123;  A,  B,  C = <span class="hljs-string">&quot;C&quot;</span>,  D = <span class="hljs-string">&quot;D&quot;</span>,  E = <span class="hljs-number">8</span>,  F,&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Enum</span>.<span class="hljs-property">A</span>) <span class="hljs-comment">//输出：0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Enum</span>[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 输出：A</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ES5:</span><br><span class="hljs-comment">    var Enum;</span><br><span class="hljs-comment">    (function (Enum) &#123;</span><br><span class="hljs-comment">        Enum[Enum[&quot;A&quot;] = 0] = &quot;A&quot;;</span><br><span class="hljs-comment">        Enum[Enum[&quot;B&quot;] = 1] = &quot;B&quot;;</span><br><span class="hljs-comment">        Enum[&quot;C&quot;] = &quot;C&quot;;</span><br><span class="hljs-comment">        Enum[&quot;D&quot;] = &quot;D&quot;;</span><br><span class="hljs-comment">        Enum[Enum[&quot;E&quot;] = 8] = &quot;E&quot;;</span><br><span class="hljs-comment">        Enum[Enum[&quot;F&quot;] = 9] = &quot;F&quot;;</span><br><span class="hljs-comment">    &#125;)(Enum || (Enum = &#123;&#125;));</span><br><span class="hljs-comment">    console.log(Enum.A); //输出：0</span><br><span class="hljs-comment">    console.log(Enum[0]); // 输出：A</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="Any类型"><a href="#Any类型" class="headerlink" title="Any类型"></a>Any类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// any类型（全局超级类型）本质上是类型系统的逃逸舱</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">notSure</span>: <span class="hljs-built_in">any</span> = <span class="hljs-number">666</span>;notSure=<span class="hljs-string">&#x27;fyCoder&#x27;</span>;notSure = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>; <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    value.foo.bar;</span><br><span class="hljs-comment">    value.trim();</span><br><span class="hljs-comment">    value();</span><br><span class="hljs-comment">    new value(); </span><br><span class="hljs-comment">    value[0][1];</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    以上形式都不会报错</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h4 id="Unknown类型"><a href="#Unknown类型" class="headerlink" title="Unknown类型"></a>Unknown类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 与any类型一样，另一种顶级类型</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">unknown</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> value = true; // OK</span><br><span class="hljs-comment"> value = 42; // OK</span><br><span class="hljs-comment"> value = &quot;Hello World&quot;; // OK</span><br><span class="hljs-comment"> value = []; // OK</span><br><span class="hljs-comment"> value = &#123;&#125;; // OK</span><br><span class="hljs-comment"> value = Math.random; // OK</span><br><span class="hljs-comment"> value = null; // OK</span><br><span class="hljs-comment"> value = undefined; // OK</span><br><span class="hljs-comment"> value = new TypeError(); // OK</span><br><span class="hljs-comment"> value = Symbol(&quot;type&quot;); // OK</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// unknow类型只能被赋值给any类型和unknow类型本身</span><br> <span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">unknown</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> let value1: unknown = value; // OK</span><br><span class="hljs-comment"> let value2: any = value; // OK</span><br><span class="hljs-comment"> let value3: boolean = value; // Error</span><br><span class="hljs-comment"> let value4: number = value; // Error</span><br><span class="hljs-comment"> let value5: string = value; // Error</span><br><span class="hljs-comment"> let value6: object = value; // Error</span><br><span class="hljs-comment"> let value7: any[] = value; // Error</span><br><span class="hljs-comment"> let value8: Function = value; // Error</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  value.foo.bar; // Error</span><br><span class="hljs-comment">  value.trim(); // Error</span><br><span class="hljs-comment">  value(); // Error</span><br><span class="hljs-comment">  new value(); // Error</span><br><span class="hljs-comment">  value[0][1]; // Error</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">与any相反，以上形式都会报错</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="Tuple-元组-类型"><a href="#Tuple-元组-类型" class="headerlink" title="Tuple(元组)类型"></a>Tuple(元组)类型</h4><p><em>js中是没有元组类型的，元组是TypeScript中特有的类型，其工作方式类似于数组</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 元祖可用于定义具有有限数量的未命名属性的类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tupleType</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">boolean</span>];<br>tupleType = [<span class="hljs-string">&quot;fyCoder&quot;</span>, <span class="hljs-literal">true</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tupleType[<span class="hljs-number">0</span>]); <span class="hljs-comment">// fyCoder</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tupleType[<span class="hljs-number">1</span>]); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 如果类型不匹配，编译器会报错</span><br>tupleType = [<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;fyCoder&quot;</span>]; <span class="hljs-comment">// Error</span><br><br><span class="hljs-comment">// 初始化元组时，必须提供每个属性的值，不然也会报错</span><br>tupleType = [<span class="hljs-string">&quot;fyCoder&quot;</span>]; <span class="hljs-comment">//Error</span><br></code></pre></td></tr></table></figure><h4 id="Void类型"><a href="#Void类型" class="headerlink" title="Void类型"></a>Void类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 声明函数返回值为void ，与any类型相反，表示没有任何类型</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">warnUser</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is my warning message&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    ES5:</span><br><span class="hljs-comment">     &quot;use strict&quot;;</span><br><span class="hljs-comment">     function warnUser() &#123;</span><br><span class="hljs-comment">        console.log(&quot;This is my warning message&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 声明一个void类型的变量没有什么作用，它的值只能是undefined 或 null</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">unusable</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h4 id="Null-和-Undefined类型"><a href="#Null-和-Undefined类型" class="headerlink" title="Null 和 Undefined类型"></a>Null 和 Undefined类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 默认情况下 null 和 undefined 是所有类型的子类型</span><br><span class="hljs-comment">// 然而 如果指定了 --strictNullChecks（严格校验） 标记，null 和 undefined 只能赋值给 void 和它们各自的类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="Never类型"><a href="#Never类型" class="headerlink" title="Never类型"></a>Never类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 表示那些永不存在的值的类型</span><br><span class="hljs-comment">// 总是会抛出异常或根本不会有返回值的函数表达式或箭头函数表达式的返回类型</span><br><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br> &#125;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br> &#125;<br> <br><span class="hljs-comment">//  可以利用never类型的特性做全面性检查</span><br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">controlFlowAnalysisWithNever</span>(<span class="hljs-params">foo: Foo</span>) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> foo === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>     <span class="hljs-comment">// 这里 foo 被收窄为 string 类型</span><br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> foo === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>     <span class="hljs-comment">// 这里 foo 被收窄为 number 类型</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-comment">// foo 在这里是 never</span><br>     <span class="hljs-keyword">const</span> <span class="hljs-attr">check</span>: <span class="hljs-built_in">never</span> = foo;<br>   &#125;<br> &#125;<br> <br><span class="hljs-comment">//  使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。</span><br></code></pre></td></tr></table></figure><h3 id="TypeScript-断言"><a href="#TypeScript-断言" class="headerlink" title="TypeScript 断言"></a>TypeScript 断言</h3><p><em>相当于类型转换，但是不进行特殊的数据检查和解构;没有运行时的影响，只是在编译阶段起作用 <strong>通俗来说相当于告诉编译器，我知道你是什么类型</strong></em></p><h4 id="1、尖括号语法"><a href="#1、尖括号语法" class="headerlink" title="1、尖括号语法"></a>1、尖括号语法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 1、尖括号语法</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h4 id="2、as语法"><a href="#2、as语法" class="headerlink" title="2、as语法"></a>2、as语法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 2、as语法</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h3 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h3><p><em>类型守卫也称类型保护，是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内</em></p><h4 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// in</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Admin</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">privileges</span>: <span class="hljs-built_in">string</span>[];<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Employee</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">startDate</span>: <span class="hljs-title class_">Date</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">UnknownEmployee</span> = <span class="hljs-title class_">Employee</span> | <span class="hljs-title class_">Admin</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printEmployeeInformation</span>(<span class="hljs-params">emp: UnknownEmployee</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Name: &quot;</span> + emp.<span class="hljs-property">name</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;privileges&quot;</span> <span class="hljs-keyword">in</span> emp) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Privileges: &quot;</span> + emp.<span class="hljs-property">privileges</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;startDate&quot;</span> <span class="hljs-keyword">in</span> emp) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Start Date: &quot;</span> + emp.<span class="hljs-property">startDate</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="typeof-关键字"><a href="#typeof-关键字" class="headerlink" title="typeof 关键字"></a>typeof 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// typeof </span><br><span class="hljs-comment">// typeof 只支持 &quot;number&quot;， &quot;string&quot;， &quot;boolean&quot; 或 &quot;symbol&quot;。当然你要去比较其他类型，也不拦着</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">padLeft</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span>, padding: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> padding === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>(padding + <span class="hljs-number">1</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>) + value;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> padding === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> padding + value;<br>   &#125;<br>   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Expected string or number, got &#x27;<span class="hljs-subst">$&#123;padding&#125;</span>&#x27;.`</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// instanceof 关键字</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Padder</span> &#123;<br>   <span class="hljs-title function_">getPaddingString</span>(): <span class="hljs-built_in">string</span>;<br> &#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpaceRepeatingPadder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Padder</span> &#123;<br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> numSpaces: <span class="hljs-built_in">number</span></span>) &#123;&#125;<br>   <span class="hljs-title function_">getPaddingString</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">numSpaces</span> + <span class="hljs-number">1</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>);<br>   &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringPadder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Padder</span> &#123;<br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> value: <span class="hljs-built_in">string</span></span>) &#123;&#125;<br>   <span class="hljs-title function_">getPaddingString</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br>   &#125;<br>&#125;<br> <br><span class="hljs-keyword">let</span> <span class="hljs-attr">padder</span>: <span class="hljs-title class_">Padder</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpaceRepeatingPadder</span>(<span class="hljs-number">6</span>);<br> <br><span class="hljs-keyword">if</span> (padder <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">SpaceRepeatingPadder</span>) &#123;<br>   <span class="hljs-comment">// padder的类型收窄为 &#x27;SpaceRepeatingPadder&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="自定义类型保护的类型谓词"><a href="#自定义类型保护的类型谓词" class="headerlink" title="自定义类型保护的类型谓词"></a>自定义类型保护的类型谓词</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 自定义类型保护的类型谓词</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isNumber</span>(<span class="hljs-params">x: <span class="hljs-built_in">any</span></span>): x is <span class="hljs-built_in">number</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&quot;number&quot;</span>;<br> &#125;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isString</span>(<span class="hljs-params">x: <span class="hljs-built_in">any</span></span>): x is <span class="hljs-built_in">string</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&quot;string&quot;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="联合类型和类型别名"><a href="#联合类型和类型别名" class="headerlink" title="联合类型和类型别名"></a>联合类型和类型别名</h3><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 联合类型 通常与 null 或 undefined 一起使用</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sayHello</span> = (<span class="hljs-params">name: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span></span>) =&gt; &#123; &#125;;<br><br><span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&quot;fyCoder&quot;</span>);<br><span class="hljs-title function_">sayHello</span>(<span class="hljs-literal">undefined</span>);<br></code></pre></td></tr></table></figure><h4 id="可辨识联合类型"><a href="#可辨识联合类型" class="headerlink" title="可辨识联合类型"></a>可辨识联合类型</h4><p><em>也称为代数数据类型或标签联合类型; 包含三个要点可辨识、联合类型和类型守卫：</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    这种类型的本质是结合联合类型和字面量类型的一种类型保护方法</span><br><span class="hljs-comment">    如果一个类型是多个类型的联合类型，且多个类型含有一个公共属性，那么就可以利用这个公共属性，来创建不同的类型保护区块。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 可辨识 （要求联合类型中的每个元素都含有一个单例类型属性）</span><br><span class="hljs-comment">// 例子中vType属性，就被称为可辨识属性</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CarTransmission</span> &#123;<br>   <span class="hljs-title class_">Automatic</span> = <span class="hljs-number">200</span>,<br>   <span class="hljs-title class_">Manual</span> = <span class="hljs-number">300</span><br> &#125;<br> <br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Motorcycle</span> &#123;<br>   <span class="hljs-attr">vType</span>: <span class="hljs-string">&quot;motorcycle&quot;</span>; <span class="hljs-comment">// discriminant</span><br>   <span class="hljs-attr">make</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// year</span><br> &#125;<br> <br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Car</span> &#123;<br>   <span class="hljs-attr">vType</span>: <span class="hljs-string">&quot;car&quot;</span>; <span class="hljs-comment">// discriminant</span><br>   <span class="hljs-attr">transmission</span>: <span class="hljs-title class_">CarTransmission</span><br> &#125;<br> <br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Truck</span> &#123;<br>   <span class="hljs-attr">vType</span>: <span class="hljs-string">&quot;truck&quot;</span>; <span class="hljs-comment">// discriminant</span><br>   <span class="hljs-attr">capacity</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// in tons</span><br> &#125;<br> <br><span class="hljs-comment">//  联合类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Vehicle</span> = <span class="hljs-title class_">Motorcycle</span> | <span class="hljs-title class_">Car</span> | <span class="hljs-title class_">Truck</span>;<br><br><span class="hljs-comment">// 类型守卫</span><br><br> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">EVALUATION_FACTOR</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>; <br><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">evaluatePrice</span>(<span class="hljs-params">vehicle: Vehicle</span>) &#123;<br>   <span class="hljs-keyword">return</span> vehicle.<span class="hljs-property">capacity</span> * <span class="hljs-variable constant_">EVALUATION_FACTOR</span>;<br> &#125;<br> <br> <span class="hljs-keyword">const</span> <span class="hljs-attr">myTruck</span>: <span class="hljs-title class_">Truck</span> = &#123; <span class="hljs-attr">vType</span>: <span class="hljs-string">&quot;truck&quot;</span>, <span class="hljs-attr">capacity</span>: <span class="hljs-number">9.5</span> &#125;;<br><br><span class="hljs-comment">// 调用上面函数会报错，因为不存在capacity属性</span><br> evaluatePrice(myTruck);<br> <br><span class="hljs-comment">// 重构后的evaluatePrice函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">evaluatePrice</span>(<span class="hljs-params">vehicle: Vehicle</span>) &#123;<br>   <span class="hljs-keyword">switch</span>(vehicle.<span class="hljs-property">vType</span>) &#123;<br>     <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;car&quot;</span>:<br>       <span class="hljs-keyword">return</span> vehicle.<span class="hljs-property">transmission</span> * <span class="hljs-variable constant_">EVALUATION_FACTOR</span>;<br>     <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;truck&quot;</span>:<br>       <span class="hljs-keyword">return</span> vehicle.<span class="hljs-property">capacity</span> * <span class="hljs-variable constant_">EVALUATION_FACTOR</span>;<br>     <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;motorcycle&quot;</span>:<br>       <span class="hljs-keyword">return</span> vehicle.<span class="hljs-property">make</span> * <span class="hljs-variable constant_">EVALUATION_FACTOR</span>;<br>   &#125;<br> &#125;<br> <br></code></pre></td></tr></table></figure><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p><em>给类型起个新名字</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Message</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[];<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params">message: Message</span>) =&gt; &#123;  <br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// TypeScript 交叉类型是将多个类型合并为一个类型</span><br><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>   <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>;<br>   <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br> &#125;<br> <br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IWorker</span> &#123;<br>   <span class="hljs-attr">companyId</span>: <span class="hljs-built_in">string</span>;<br> &#125;<br> <br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">IStaff</span> = <span class="hljs-title class_">IPerson</span> &amp; <span class="hljs-title class_">IWorker</span>; <span class="hljs-comment">// 使用&amp;</span><br> <br> <span class="hljs-keyword">const</span> <span class="hljs-attr">staff</span>: <span class="hljs-title class_">IStaff</span> = &#123;<br>   <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;Xc0029&#x27;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br>   <span class="hljs-attr">companyId</span>: <span class="hljs-string">&#x27;Xc&#x27;</span><br> &#125;;<br> <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(staff)<br></code></pre></td></tr></table></figure><h3 id="TypeScript-函数"><a href="#TypeScript-函数" class="headerlink" title="TypeScript 函数"></a>TypeScript 函数</h3><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 常见语法</span><br> myBooks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reading&#x27;</span>));<br> <br> myBooks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">title</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title));<br> <br> myBooks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">title, idx, arr</span>) =&gt;</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(idx + <span class="hljs-string">&#x27;-&#x27;</span> + title);<br> );<br> <br> myBooks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">title, idx, arr</span>) =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(idx + <span class="hljs-string">&#x27;-&#x27;</span> + title);<br> &#125;);<br> <br><span class="hljs-comment">// 使用示例</span><br><br> <span class="hljs-comment">// 未使用箭头函数</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Book</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>   self.<span class="hljs-property">publishDate</span> = <span class="hljs-number">2016</span>;<br>   <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(self.<span class="hljs-property">publishDate</span>);<br>   &#125;, <span class="hljs-number">1000</span>);<br> &#125;<br> <br> <span class="hljs-comment">// 使用箭头函数</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Book</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">publishDate</span> = <span class="hljs-number">2016</span>;<br>   <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publishDate</span>);<br>   &#125;, <span class="hljs-number">1000</span>);<br> &#125;<br> <br></code></pre></td></tr></table></figure><h4 id="参数类型和返回类型"><a href="#参数类型和返回类型" class="headerlink" title="参数类型和返回类型"></a>参数类型和返回类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">IdGenerator</span>: <span class="hljs-function">(<span class="hljs-params">chars: <span class="hljs-built_in">string</span>, nums: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br><br><span class="hljs-title class_">IdGenerator</span> = createUserId; <span class="hljs-comment">// 以上是两种写法</span><br></code></pre></td></tr></table></figure><h4 id="可选参数及默认参数"><a href="#可选参数及默认参数" class="headerlink" title="可选参数及默认参数"></a>可选参数及默认参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 可选参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">number</span>, age?: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br><br><span class="hljs-comment">// 默认参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserId</span>(<span class="hljs-params"></span><br><span class="hljs-params">  name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;fyCoder&quot;</span>,</span><br><span class="hljs-params">  id: <span class="hljs-built_in">number</span>,</span><br><span class="hljs-params">  age?: <span class="hljs-built_in">number</span> <span class="hljs-comment">// （缺省）通过? 来定义可选参数，要放在普通参数后面，不然会导致编译错误</span></span><br><span class="hljs-params"></span>): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">return</span> name + id;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>  items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(item);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">let</span> a = [];<br><span class="hljs-title function_">push</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p><em>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 函数重载 </span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span>;<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>;<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span>;<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>;<br><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: Combinable, b: Combinable</span>) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>     <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">toString</span>() + b.<span class="hljs-title function_">toString</span>();<br>   &#125;<br>   <span class="hljs-keyword">return</span> a + b;<br> &#125;<br> <br><span class="hljs-comment">// 方法重载</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>   <span class="hljs-title function_">add</span>(<span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>   <span class="hljs-title function_">add</span>(<span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>   <span class="hljs-title function_">add</span>(<span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>   <span class="hljs-title function_">add</span>(<span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>   <span class="hljs-title function_">add</span>(<span class="hljs-params">a: Combinable, b: Combinable</span>) &#123; <span class="hljs-comment">// 并不是重载列表的一部分</span><br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">toString</span>() + b.<span class="hljs-title function_">toString</span>();<br>     &#125;<br>     <span class="hljs-keyword">return</span> a + b;<br>   &#125;<br> &#125;<br> <br> <span class="hljs-keyword">const</span> calculator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br> <span class="hljs-keyword">const</span> result = calculator.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;fyCoder&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">// 在定义重载时，一定要把最精确的定义放在最前面</span><br></code></pre></td></tr></table></figure><h3 id="TypeScript-数组"><a href="#TypeScript-数组" class="headerlink" title="TypeScript 数组"></a>TypeScript 数组</h3><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数组解构 []</span><br> <span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; <span class="hljs-keyword">let</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>; <span class="hljs-keyword">let</span> <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span>;<br> <span class="hljs-keyword">let</span> five_array = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br> [x,y,z] = five_array;<br></code></pre></td></tr></table></figure><h4 id="数组展开运算符"><a href="#数组展开运算符" class="headerlink" title="数组展开运算符"></a>数组展开运算符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数组展开运算符 ...</span><br> <span class="hljs-keyword">let</span> two_array = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br> <span class="hljs-keyword">let</span> five_array = [...two_array, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数组遍历</span><br> <span class="hljs-keyword">let</span> <span class="hljs-attr">colors</span>: <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> colors) &#123;  <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="TypeScript-对象"><a href="#TypeScript-对象" class="headerlink" title="TypeScript 对象"></a>TypeScript 对象</h3><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 对象解构 &#123;&#125;</span><br> <span class="hljs-keyword">let</span> person = &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;fyCoder&quot;</span>,<br>   <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;Female&quot;</span>,<br> &#125;;<br> <br> <span class="hljs-keyword">let</span> &#123; name, gender &#125; = person;<br></code></pre></td></tr></table></figure><h4 id="对象展开运算符"><a href="#对象展开运算符" class="headerlink" title="对象展开运算符"></a>对象展开运算符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 对象展开运算符 ...</span><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;fyCoder&quot;</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;Female&quot;</span>,<br>  <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;ZheJiang&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="组装对象"><a href="#组装对象" class="headerlink" title="组装对象"></a>组装对象</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 组装对象</span><br><span class="hljs-keyword">let</span> personWithAge = &#123; ...person, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span> &#125;;<br></code></pre></td></tr></table></figure><h4 id="获取除了某些项外的其它项"><a href="#获取除了某些项外的其它项" class="headerlink" title="获取除了某些项外的其它项"></a>获取除了某些项外的其它项</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 获取除了某些项外的其它项</span><br><span class="hljs-keyword">let</span> &#123; name, ...rest &#125; = person;<br></code></pre></td></tr></table></figure><h3 id="TypeScript-接口"><a href="#TypeScript-接口" class="headerlink" title="TypeScript 接口"></a>TypeScript 接口</h3><p><em>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</em></p><h4 id="对象的形状"><a href="#对象的形状" class="headerlink" title="对象的形状"></a>对象的形状</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 对象的形状</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>   <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br> &#125;<br> <br> <span class="hljs-keyword">let</span> <span class="hljs-title class_">Fycoder</span>: <span class="hljs-title class_">Person</span> = &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Fycoder&quot;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br> &#125;;<br></code></pre></td></tr></table></figure><h4 id="可选-只读属性"><a href="#可选-只读属性" class="headerlink" title="可选 | 只读属性"></a>可选 | 只读属性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  可选 | 只读属性</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>   age?: <span class="hljs-built_in">number</span>;<br> &#125;<br><span class="hljs-comment">// 只读属性用于限制只能在对象刚刚创建的时候修改其值</span><br> <br> <span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br> <span class="hljs-keyword">let</span> <span class="hljs-attr">ro</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-built_in">number</span>&gt; = a; <span class="hljs-comment">//ReadonlyArray&lt;T&gt; 与 Array&lt;T&gt; 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改</span><br> ro[<span class="hljs-number">0</span>] = <span class="hljs-number">12</span>; <span class="hljs-comment">// error!</span><br> ro.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// error!</span><br> ro.<span class="hljs-property">length</span> = <span class="hljs-number">100</span>; <span class="hljs-comment">// error!</span><br> a = ro; <span class="hljs-comment">// error!</span><br> <br></code></pre></td></tr></table></figure><h3 id="TypeScript-类"><a href="#TypeScript-类" class="headerlink" title="TypeScript 类"></a>TypeScript 类</h3><p><em>在面向对象语言中，类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法</em></p><h4 id="类的属性与方法"><a href="#类的属性与方法" class="headerlink" title="类的属性与方法"></a>类的属性与方法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;<br>  <span class="hljs-comment">// 静态属性</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-attr">cname</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Greeter&quot;</span>;<br>  <span class="hljs-comment">// 成员属性</span><br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">// 构造函数 - 执行初始化操作</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = message;<br>  &#125;<br><br>  <span class="hljs-comment">// 静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getClassName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Class name is Greeter&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 成员方法</span><br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> greeter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeter</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  ES5</span><br><span class="hljs-comment">  &quot;use strict&quot;;</span><br><span class="hljs-comment">  var Greeter = &#x27;/** @class *&#x27;/ (function () &#123;</span><br><span class="hljs-comment">      // 构造函数 - 执行初始化操作</span><br><span class="hljs-comment">      function Greeter(message) &#123;</span><br><span class="hljs-comment">          this.greeting = message;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">      // 静态方法</span><br><span class="hljs-comment">      Greeter.getClassName = function () &#123;</span><br><span class="hljs-comment">          return &quot;Class name is Greeter&quot;;</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">      // 成员方法</span><br><span class="hljs-comment">      Greeter.prototype.greet = function () &#123;</span><br><span class="hljs-comment">          return &quot;Hello, &quot; + this.greeting;</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">      // 静态属性</span><br><span class="hljs-comment">      Greeter.cname = &quot;Greeter&quot;;</span><br><span class="hljs-comment">      return Greeter;</span><br><span class="hljs-comment">  &#125;());</span><br><span class="hljs-comment">  var greeter = new Greeter(&quot;world&quot;);</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h4 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h4><p><em>在ts中，通过getter和setter方法来实现数据的封装和有效性校验，防止出现异常数据</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> passcode = <span class="hljs-string">&quot;Hello TypeScript&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">_fullName</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">newName: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (passcode &amp;&amp; passcode == <span class="hljs-string">&quot;Hello TypeScript&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span> = newName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error: Unauthorized update of employee!&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>employee.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;fyCoder&quot;</span>;<br><span class="hljs-keyword">if</span> (employee.<span class="hljs-property">fullName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(employee.<span class="hljs-property">fullName</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p><em>继承是一种联结类与类的层次模型。指的是一个类（子类、子接口）继承另外的一个类（父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系</em></p><p><strong>is-a关系</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">theName: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = theName;<br>  &#125;<br>  <br>  <span class="hljs-title function_">move</span>(<span class="hljs-params">distanceInMeters: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> moved <span class="hljs-subst">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snake</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123; <span class="hljs-comment">// 使用extends关键字</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name);<br>  &#125;<br>  <br>  <span class="hljs-title function_">move</span>(<span class="hljs-params">distanceInMeters = <span class="hljs-number">5</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Slithering...&quot;</span>);<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">move</span>(distanceInMeters);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> sam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Snake</span>(<span class="hljs-string">&quot;Sammy the Python&quot;</span>);<br>sam.<span class="hljs-title function_">move</span>();<br></code></pre></td></tr></table></figure><h4 id="ECMAScript-私有字段"><a href="#ECMAScript-私有字段" class="headerlink" title="ECMAScript 私有字段"></a>ECMAScript 私有字段</h4><p><em>Typescript3.8版本开始支持</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   #<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br> <br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>     <span class="hljs-variable language_">this</span>.#name = name;<br>   &#125;<br> <br>   <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.#name&#125;</span>!`</span>);<br>   &#125;<br> &#125;<br> <br> <span class="hljs-keyword">let</span> fyCoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;fyCoder&quot;</span>);<br> <br> fyCoder.#name;<br> <span class="hljs-comment">//     ~~~~~</span><br> <span class="hljs-comment">// Property &#x27;#name&#x27; is not accessible outside class &#x27;Person&#x27;</span><br> <span class="hljs-comment">// because it has a private identifier.</span><br> <br><span class="hljs-comment">// 私有字段 以 # 字符开头，有时我们称之为私有名称；</span><br><span class="hljs-comment">// 每个私有字段名称都唯一地限定于其包含的类；</span><br><span class="hljs-comment">// 不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</span><br><span class="hljs-comment">// 私有字段不能在包含的类之外访问，甚至不能被检测到。</span><br></code></pre></td></tr></table></figure><h3 id="TypeScript-泛型"><a href="#TypeScript-泛型" class="headerlink" title="TypeScript 泛型"></a>TypeScript 泛型</h3><p><em>使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据</em></p><p><em>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：类的实例成员、类分方法、函数参数和函数返回值</em></p><p><em>泛型是允许同一个函数接受不同类型的参数的一种模版，使用泛型来创建可复用组件比使用any类型要更好，因为泛型会保留参数类型</em></p><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenericIdentityFn</span>&lt;T&gt; &#123;  (<span class="hljs-attr">arg</span>: T): T;&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericNumber</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">zeroValue</span>: T;<br>  <span class="hljs-attr">add</span>: <span class="hljs-function">(<span class="hljs-params">x: T, y: T</span>) =&gt;</span> T;<br>&#125;<br><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericNumber</span>&lt;<span class="hljs-built_in">number</span>&gt;();<br>myGenericNumber.<span class="hljs-property">zeroValue</span> = <span class="hljs-number">0</span>;<br>myGenericNumber.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="泛型变量-常见"><a href="#泛型变量-常见" class="headerlink" title="泛型变量(常见)"></a>泛型变量(常见)</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">T（Type）：表示一个 TypeScript 类型<br>K（Key）：表示对象中的键类型<br>V（Value）：表示对象中的值类型<br>E（Element）：表示元素类型<br></code></pre></td></tr></table></figure><h4 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h4><h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 1、typeof 用来获取一个变量声明或对象的类型</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>   <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br> &#125;<br> <br> <span class="hljs-keyword">const</span> <span class="hljs-attr">sem</span>: <span class="hljs-title class_">Person</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fyCoder&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span> &#125;;<br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Sem</span>= <span class="hljs-keyword">typeof</span> sem; <span class="hljs-comment">// -&gt; Person</span><br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toArray</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>): <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; &#123;<br>   <span class="hljs-keyword">return</span> [x];<br> &#125;<br> <br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Func</span> = <span class="hljs-keyword">typeof</span> toArray; <span class="hljs-comment">// -&gt; (x: number) =&gt; number[]</span><br></code></pre></td></tr></table></figure><h5 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 2、keyof 遍历一个对象中的所有key值</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>     <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br> &#125;<br> <br> <span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K1</span> = keyof <span class="hljs-title class_">Person</span>; <span class="hljs-comment">// &quot;name&quot; | &quot;age&quot;</span><br> <span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K2</span> = keyof <span class="hljs-title class_">Person</span>[]; <span class="hljs-comment">// &quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot; </span><br> <span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K3</span> = keyof &#123; [<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-title class_">Person</span> &#125;;  <span class="hljs-comment">// string | number</span><br></code></pre></td></tr></table></figure><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  3、in 用来遍历枚举类型</span><br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Keys</span> = <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span><br> <br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Obj</span> =  &#123;<br>   [p <span class="hljs-keyword">in</span> <span class="hljs-title class_">Keys</span>]: <span class="hljs-built_in">any</span><br> &#125; <span class="hljs-comment">// -&gt; &#123; a: any, b: any, c: any &#125;</span><br></code></pre></td></tr></table></figure><h5 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  4、infer 在条件类型语句中，声明类型变量并使用</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ReturnType</span>&lt;T&gt; = T <span class="hljs-keyword">extends</span> (<br>   ...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]<br> ) =&gt; infer R ? R : <span class="hljs-built_in">any</span>;<br></code></pre></td></tr></table></figure><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  5、extends 添加泛型约束</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILengthwise</span> &#123;<br>   <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br> &#125;<br> <br> <span class="hljs-keyword">function</span> loggingIdentity&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ILengthwise</span>&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>);<br>   <span class="hljs-keyword">return</span> arg;<br> &#125;<br> <br>  <span class="hljs-title function_">loggingIdentity</span>(<span class="hljs-number">3</span>);  <span class="hljs-comment">// Error 因为定义了约束，所以不再适用于任意类型</span><br>  <br>  <span class="hljs-title function_">loggingIdentity</span>(&#123;<span class="hljs-attr">length</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">//OK</span><br></code></pre></td></tr></table></figure><h5 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  6、Partial 将某个类型里的属性全部变为可选项?</span><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * node_modules/typescript/lib/lib.es5.d.ts</span><br><span class="hljs-comment">  * Make all properties in T optional</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Partial</span>&lt;T&gt; = &#123;<br>   [P <span class="hljs-keyword">in</span> keyof T]?: T[P]; <span class="hljs-comment">// 通过keyof拿到T的所有属性名，使用in进行遍历，将值赋值给P，通过T[P]取得相应的属性值。?做缺省，用于将所有属性变为可选</span><br> &#125;;<br> <br><span class="hljs-comment">// .eg.</span><br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> &#123;<br>   <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>   <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;<br> &#125;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;<br>   <span class="hljs-keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;<br> &#125;<br> <br> <span class="hljs-keyword">const</span> todo1 = &#123;<br>   <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;organize desk&quot;</span>,<br>   <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;clear clutter&quot;</span>,<br> &#125;;<br> <br> <span class="hljs-keyword">const</span> todo2 = <span class="hljs-title function_">updateTodo</span>(todo1, &#123;<br>   <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;throw out trash&quot;</span>,<br> &#125;);<br>  <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   fieldsToUpdate的类型为Partial&lt;Todo&gt; 即：</span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">     title?: string | undefined;   </span><br><span class="hljs-comment">     description?: string | undefined;</span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="TypeScript-装饰器"><a href="#TypeScript-装饰器" class="headerlink" title="TypeScript 装饰器"></a>TypeScript 装饰器</h3><h4 id="装饰器是什么？"><a href="#装饰器是什么？" class="headerlink" title="装饰器是什么？"></a>装饰器是什么？</h4><ul><li>它是一个表达式</li><li>该表达式被执行后，返回一个函数</li><li>函数的入参分别为 target、name和descriptoe</li><li>执行该函数后，可能返回descriptor对象，用于配制target对象</li></ul><h4 id="装饰器的分类"><a href="#装饰器的分类" class="headerlink" title="装饰器的分类"></a>装饰器的分类</h4><ul><li>类装饰器（Class decorators）</li><li>属性装饰器（Property decorators）</li><li>方法装饰器（Method decorators）</li><li>参数装饰器（Parameter decorators）</li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p><em>用来装饰类，接收参数：target</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// target: Object - 被装饰的类</span><br><br><span class="hljs-comment">//声明</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ClassDecorator</span> = &lt;<span class="hljs-title class_">TFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&gt;<span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  target: TFunction</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> <span class="hljs-title class_">TFunction</span> | <span class="hljs-built_in">void</span>;<br><br><span class="hljs-comment">// 例子</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Greeter</span>(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>): <span class="hljs-built_in">void</span> &#123;<br>  target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">greet</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello Gemma!&quot;</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-meta">@Greeter</span>  <span class="hljs-comment">// 使用@Greeter语法糖，上面定义的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeting</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 内部实现</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myGreeting = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>();<br>myGreeting.<span class="hljs-title function_">greet</span>(); <span class="hljs-comment">// &#x27;Hello Gemma!&#x27;;</span><br><br><span class="hljs-comment">//自定义输入语法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Greeter</span>(<span class="hljs-params">greeting: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) &#123;<br>    target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">greet</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting);<br>    &#125;;<br>  &#125;;<br>&#125;<br><br><span class="hljs-meta">@Greeter</span>(<span class="hljs-string">&quot;Hello TS!&quot;</span>) <span class="hljs-comment">//这里做了自定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeting</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 内部实现</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myGreeting = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>();<br>myGreeting.<span class="hljs-title function_">greet</span>(); <span class="hljs-comment">//  &#x27;Hello TS!&#x27;;</span><br><br></code></pre></td></tr></table></figure><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><p><em>用来装饰类的属性，接收参数：target、propertyKey</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// target: Object - 被装饰的类</span><br><span class="hljs-comment">// propertyKey: string | symbol - 被装饰类的属性名</span><br><br><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">PropertyDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target:<span class="hljs-built_in">Object</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">   propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span> </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br><span class="hljs-comment">// 例子 定义一个logProperty函数，在跟踪用户对属性的操作</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logProperty</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, key: <span class="hljs-built_in">string</span></span>) &#123;<br>   <span class="hljs-keyword">delete</span> target[key];<br> <br>   <span class="hljs-keyword">const</span> backingField = <span class="hljs-string">&quot;_&quot;</span> + key;<br> <br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, backingField, &#123;<br>     <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>   &#125;);<br> <br>   <span class="hljs-comment">// property getter</span><br>   <span class="hljs-keyword">const</span> getter = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">this</span>: <span class="hljs-built_in">any</span></span>) &#123;<br>     <span class="hljs-keyword">const</span> currVal = <span class="hljs-variable language_">this</span>[backingField];<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Get: <span class="hljs-subst">$&#123;key&#125;</span> =&gt; <span class="hljs-subst">$&#123;currVal&#125;</span>`</span>);<br>     <span class="hljs-keyword">return</span> currVal;<br>   &#125;;<br> <br>   <span class="hljs-comment">// property setter</span><br>   <span class="hljs-keyword">const</span> setter = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">this</span>: <span class="hljs-built_in">any</span>, newVal: <span class="hljs-built_in">any</span></span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Set: <span class="hljs-subst">$&#123;key&#125;</span> =&gt; <span class="hljs-subst">$&#123;newVal&#125;</span>`</span>);<br>     <span class="hljs-variable language_">this</span>[backingField] = newVal;<br>   &#125;;<br> <br>   <span class="hljs-comment">// Create new property with getter and setter</span><br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, &#123;<br>     <span class="hljs-attr">get</span>: getter,<br>     <span class="hljs-attr">set</span>: setter,<br>     <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>   &#125;);<br> &#125;<br> <br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <br>   <span class="hljs-meta">@logProperty</span>   <span class="hljs-comment">//语法糖</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br> <br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name : <span class="hljs-built_in">string</span></span>) &#123; <br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>   &#125;<br> &#125;<br> <br> <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;fyCoder&quot;</span>);<br> p1.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Gemma&quot;</span>;<br> <br> <span class="hljs-comment">// Set: name =&gt; fyCoder</span><br> <span class="hljs-comment">// Set: name =&gt; Gemma</span><br></code></pre></td></tr></table></figure><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><p><em>用来装饰类的方法，接收三个参数：target、propertyKey、descriptor</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// target: Object - 被装饰的类</span><br><span class="hljs-comment">// propertyKey: string | symbol - 方法名</span><br><span class="hljs-comment">// descriptor: TypePropertyDescript - 属性描述符</span><br><br><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">MethodDecorator</span> = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">target:<span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>,         </span></span><br><span class="hljs-params"><span class="hljs-function">   descriptor: TypePropertyDescript&lt;T&gt;</span>) =&gt;</span> <span class="hljs-title class_">TypedPropertyDescriptor</span>&lt;T&gt; | <span class="hljs-built_in">void</span>;<br><br><span class="hljs-comment">// 例子</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">LogOutput</span>(<span class="hljs-params">tarage: <span class="hljs-built_in">Function</span>, key: <span class="hljs-built_in">string</span>, descriptor: <span class="hljs-built_in">any</span></span>) &#123;<br>   <span class="hljs-keyword">let</span> originalMethod = descriptor.<span class="hljs-property">value</span>;<br>   <span class="hljs-keyword">let</span> newMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">any</span> &#123;<br>     <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: <span class="hljs-built_in">any</span> = originalMethod.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>     <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">loggedOutput</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">loggedOutput</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;();<br>     &#125;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">loggedOutput</span>.<span class="hljs-title function_">push</span>(&#123;<br>       <span class="hljs-attr">method</span>: key,<br>       <span class="hljs-attr">parameters</span>: args,<br>       <span class="hljs-attr">output</span>: result,<br>       <span class="hljs-attr">timestamp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>     &#125;);<br>     <span class="hljs-keyword">return</span> result;<br>   &#125;;<br>   descriptor.<span class="hljs-property">value</span> = newMethod;<br> &#125;<br> <br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>   <span class="hljs-meta">@LogOutput</span><br>   double (<span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span> &#123;<br>     <span class="hljs-keyword">return</span> num * <span class="hljs-number">2</span>;<br>   &#125;<br> &#125;<br> <br> <span class="hljs-keyword">let</span> calc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br> calc.<span class="hljs-title function_">double</span>(<span class="hljs-number">11</span>);<br> <span class="hljs-comment">// console ouput: [&#123;method: &quot;double&quot;, output: 22, ...&#125;]</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(calc.<span class="hljs-property">loggedOutput</span>); <br></code></pre></td></tr></table></figure><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><p><em>装饰函数参数，接收三个参数：target、propertyKey、parameterIndex</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//target: Object - 被装饰的类</span><br><span class="hljs-comment">//propertyKey: string | symbol - 方法名</span><br><span class="hljs-comment">//parameterIndex: number - 方法中参数的索引值</span><br><br><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ParameterDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">   parameterIndex: <span class="hljs-built_in">number</span> </span>) =&gt;</span> <span class="hljs-built_in">void</span><br><br><span class="hljs-comment">// 例子</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Log</span>(<span class="hljs-params">target: <span class="hljs-built_in">Function</span>, key: <span class="hljs-built_in">string</span>, parameterIndex: <span class="hljs-built_in">number</span></span>) &#123; <br>  <span class="hljs-keyword">let</span> functionLogged = key || target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span>;  <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`The parameter in position <span class="hljs-subst">$&#123;parameterIndex&#125;</span> at <span class="hljs-subst">$&#123;functionLogged&#125;</span> has  been decorated`</span>);<br>       <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;  <br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;  <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Log</span> phrase: <span class="hljs-built_in">string</span></span>) &#123;    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = phrase;   <br>  &#125;<br>&#125; <br><span class="hljs-comment">//  The parameter in position 0 at Greeter has been decorated</span><br><br></code></pre></td></tr></table></figure><h3 id="编译上下文"><a href="#编译上下文" class="headerlink" title="编译上下文"></a>编译上下文</h3><h4 id="tsconfig-json的作用"><a href="#tsconfig-json的作用" class="headerlink" title="tsconfig.json的作用"></a>tsconfig.json的作用</h4><ol><li>用于标识 TypeScript 项目的根路径；</li><li>用于配置 TypeScript 编译器；</li><li>用于指定编译的文件。</li></ol><h4 id="tsconfig-json-重要字段"><a href="#tsconfig-json-重要字段" class="headerlink" title="tsconfig.json 重要字段"></a>tsconfig.json 重要字段</h4><ol><li>files - 设置要编译的文件的名称；</li><li>include - 设置需要进行编译的文件，支持路径模式匹配；</li><li>exclude - 设置无需进行编译的文件，支持路径模式匹配；</li><li>compilerOptions - 设置与编译流程相关的选项。</li></ol><h4 id="compilerOptions-选项"><a href="#compilerOptions-选项" class="headerlink" title="compilerOptions 选项"></a>compilerOptions 选项</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-comment">/* 基本选项 */</span><br>     <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 指定 ECMAScript 目标版本: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES6&#x27;/&#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, or &#x27;ESNEXT&#x27;</span><br>     <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commonjs&quot;</span><span class="hljs-punctuation">,</span>                  <span class="hljs-comment">// 指定使用模块: &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27; or &#x27;es2015&#x27;</span><br>     <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>                             <span class="hljs-comment">// 指定要包含在编译中的库文件</span><br>     <span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 允许编译 javascript 文件</span><br>     <span class="hljs-attr">&quot;checkJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 报告 javascript 文件中的错误</span><br>     <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;preserve&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">// 指定 jsx 代码的生成: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;</span><br>     <span class="hljs-attr">&quot;declaration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                   <span class="hljs-comment">// 生成相应的 &#x27;.d.ts&#x27; 文件</span><br>     <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">// 生成相应的 &#x27;.map&#x27; 文件</span><br>     <span class="hljs-attr">&quot;outFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 将输出文件合并为一个文件</span><br>     <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">// 指定输出目录</span><br>     <span class="hljs-attr">&quot;rootDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 用来控制输出目录结构 --outDir.</span><br>     <span class="hljs-attr">&quot;removeComments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 删除编译后的所有的注释</span><br>     <span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">// 不生成输出文件</span><br>     <span class="hljs-attr">&quot;importHelpers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                 <span class="hljs-comment">// 从 tslib 导入辅助工具函数</span><br>     <span class="hljs-attr">&quot;isolatedModules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>               <span class="hljs-comment">// 将每个文件做为单独的模块 （与 &#x27;ts.transpileModule&#x27; 类似）.</span><br> <br>     <span class="hljs-comment">/* 严格的类型检查选项 */</span><br>     <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">// 启用所有严格类型检查选项</span><br>     <span class="hljs-attr">&quot;noImplicitAny&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                 <span class="hljs-comment">// 在表达式和声明上有隐含的 any类型时报错</span><br>     <span class="hljs-attr">&quot;strictNullChecks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 启用严格的 null 检查</span><br>     <span class="hljs-attr">&quot;noImplicitThis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span><br>     <span class="hljs-attr">&quot;alwaysStrict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                  <span class="hljs-comment">// 以严格模式检查每个模块，并在每个文件里加入 &#x27;use strict&#x27;</span><br> <br>     <span class="hljs-comment">/* 额外的检查 */</span><br>     <span class="hljs-attr">&quot;noUnusedLocals&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 有未使用的变量时，抛出错误</span><br>     <span class="hljs-attr">&quot;noUnusedParameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 有未使用的参数时，抛出错误</span><br>     <span class="hljs-attr">&quot;noImplicitReturns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span><br>     <span class="hljs-attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span><br> <br>     <span class="hljs-comment">/* 模块解析选项 */</span><br>     <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 选择模块解析策略： &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6)</span><br>     <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 用于解析非相对模块名称的基目录</span><br>     <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>                           <span class="hljs-comment">// 模块名到基于 baseUrl 的路径映射的列表</span><br>     <span class="hljs-attr">&quot;rootDirs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span><br>     <span class="hljs-attr">&quot;typeRoots&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 包含类型声明的文件列表</span><br>     <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>                           <span class="hljs-comment">// 需要包含的类型声明文件名列表</span><br>     <span class="hljs-attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 允许从没有设置默认导出的模块中默认导入。</span><br> <br>     <span class="hljs-comment">/* Source Map Options */</span><br>     <span class="hljs-attr">&quot;sourceRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span><br>     <span class="hljs-attr">&quot;mapRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span><br>     <span class="hljs-attr">&quot;inlineSourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>               <span class="hljs-comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span><br>     <span class="hljs-attr">&quot;inlineSources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                 <span class="hljs-comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span><br> <br>     <span class="hljs-comment">/* 其他选项 */</span><br>     <span class="hljs-attr">&quot;experimentalDecorators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>        <span class="hljs-comment">// 启用装饰器</span><br>     <span class="hljs-attr">&quot;emitDecoratorMetadata&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span>          <span class="hljs-comment">// 为装饰器提供元数据的支持</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图解HTTP(未完成)</title>
    <link href="/DingFengBo/2023/03/06/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/DingFengBo/2023/03/06/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、了解Web及网络基础"><a href="#一、了解Web及网络基础" class="headerlink" title="一、了解Web及网络基础"></a>一、了解Web及网络基础</h2><h4 id="什么是HTTP协议？"><a href="#什么是HTTP协议？" class="headerlink" title="什么是HTTP协议？"></a>什么是HTTP协议？</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">HTTP (HyperText <span class="hljs-built_in">Transfer</span> Protocol) 超文本传输协议<br></code></pre></td></tr></table></figure><p>从客户端到服务端请求一系列运作流程的规范约定</p><p><strong>诞生</strong></p><p><em>1989年3月CERN（欧洲核物理研究所）蒂姆·伯纳斯-李博士 提出一种能让远隔两地的研究者共享知识的设想</em></p><p><em>构建技术：</em></p><ol><li><p>把SGML作为页面的文本标记语言的HTML</p><p><em>SGML（Standard Generalized Markup Language 标准通用标记语言）</em></p><p><em>HTML （HyperText Markup Language 超文本标记语言）</em></p></li><li><p>作为文档传递协议的<strong>HTTP</strong></p></li><li><p>指定文档所在地址的URL（Uniform Resource Locator 统一资源定位符）</p></li></ol><h6 id="成长"><a href="#成长" class="headerlink" title="成长"></a><strong>成长</strong></h6><ul><li>web（野蛮生长）</li></ul><p><em>1990年11月 CERN成功研发了世界上第一台Web服务器和Web浏览器</em></p><p><em>1993年1月 NCSA（National Center for Supercomputer Applications 美国国家超级计算机应用中心）研发的Mosaic问世，它以内联（in-line）等形式显示HTML图像 童年秋天Mosaic的Windows版和Macintosh版面世</em></p><p><em>1994年12月 网景通信公司发布了Netscape Navigator 1.0</em></p><p><em>1995年微软公司发布Internet Explorer 1.0和2.0</em></p><p><em>1995年左右起，微软公司与网景通信公司之间爆发浏览器大战</em></p><p><em>2000年前后，这场浏览器战争随着网景通信公司的衰落而暂告以段落</em></p><p><em>2004年 Mozilla基金会发布了Firefox浏览器，第二次浏览器大战随机爆发</em></p><p><em>之后 Internet Explorer 浏览器的版本从6升到了7 前后花费了5年时间….再后来Chrome、Opera、safari等纷纷抢占市场份额</em></p><ul><li><p>HTTP（驻足不前）</p><p><em>1990年问世 HTTP&#x2F;0.9</em></p><p><em>1996年5月 正式作为标准被公布 版本命名为HTTP&#x2F;1.0 并记载于RFC1945</em></p><p><em>1997年1月公布的HTTP&#x2F;1.1 是目前主流的HTTP协议版本 RFC2068</em></p><p><em>修订版 RFC2626</em></p><p><em>新一代HTTP&#x2F;2.0 正在修订中，但要达到较高的使用覆盖率，仍需假以时日</em></p></li></ul><h4 id="什么是TCP-x2F-IP协议族？"><a href="#什么是TCP-x2F-IP协议族？" class="headerlink" title="什么是TCP&#x2F;IP协议族？"></a>什么是TCP&#x2F;IP协议族？</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">通常使用的网络（包括互联网）是在TCP/<span class="hljs-built_in">IP</span>协议族的基础上运作的。而HTTP属于它内部的一个子集。<br>把与互联网相关联的协议集合起来的总称<br></code></pre></td></tr></table></figure><p><em>该篇仅介绍理解HTTP所需掌握的TCP&#x2F;IP协议族的概要</em></p><p><strong>分层管理</strong></p><ol><li><p>应用层（决定了向用户提供应用服务时通信的活动）</p><p>应用服务：FTP（File Transfer Protocol 文件传输协议）、DNS（Domain Name System 域名系统）服务</p><p><strong>HTTP协议处于该层</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">HTTP报文+HTTP数据<br></code></pre></td></tr></table></figure></li><li><p>传输层（对上层应用层，提供处于网络连接中的两台计算机之间的数据传输）</p><p>TCP（Transmission Control Protocol 传输控制协议）——可靠</p><p>UDP（User Data Protocol 用户数据协议）——不可靠</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">TCP报文段+TCP首部<br></code></pre></td></tr></table></figure></li><li><p>网络层【网络互连层】（用来处理在网络上流动的数据包）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">IP</span>数据包+<span class="hljs-built_in">IP</span>首部<br></code></pre></td></tr></table></figure></li><li><p>数据链路层【链路层、网络接口层】（用来处理连接网络的硬件部分）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">网络架构+以太网首部<br></code></pre></td></tr></table></figure></li></ol><h4 id="与HTTP关系密切的协议：IP、TCP和DNS"><a href="#与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="与HTTP关系密切的协议：IP、TCP和DNS"></a>与HTTP关系密切的协议：IP、TCP和DNS</h4><p><strong>IP协议（负责传输，位于应用层）</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">重要条件：<br><span class="hljs-number">1</span>、IP地址<span class="hljs-symbol">:</span>节点被分配到的地址——可变换<br><span class="hljs-number">2</span>、MAC地址(Media <span class="hljs-built_in">Address</span> Control <span class="hljs-built_in">Address</span>)<span class="hljs-symbol">:</span>网卡所属的固定地址——基本不改<br></code></pre></td></tr></table></figure><p><em>ARP协议（Address Resolution Protocol）：一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址</em></p><p><strong>TCP协议（提供可靠的字节流服务，位于传输层）</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">三次握手（<span class="hljs-literal">three</span>-way handshaking）策略<br>SYN（synchronize-同步）<br>ACK（acknowledgement-确认）<br></code></pre></td></tr></table></figure><p>![image-20221020170828489](&#x2F;Users&#x2F;shenyihuan&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20221020170828489.png)</p><p><strong>DNS服务（负责域名解析，位于应用层）</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">提供通过域名查找<span class="hljs-built_in">IP</span>地址，或逆向从<span class="hljs-built_in">IP</span>地址反查域名<br></code></pre></td></tr></table></figure><h4 id="在浏览器中输入URL后都会发生什么？"><a href="#在浏览器中输入URL后都会发生什么？" class="headerlink" title="在浏览器中输入URL后都会发生什么？"></a>在浏览器中输入URL后都会发生什么？</h4><ol><li><p>用户输入URL</p></li><li><p>回车，浏览器进程将url传给网络进程</p></li><li><p>网络进程接收到url，先查找有没有缓存，没有缓存，进入网络请求。首先获取域名IP，系统从hosts文件中寻找与域名对应的IP地址。找到，与服务器建立TCP连接。没有找到，将网址提交DNS域名解析服务器进行IP地址解析</p></li><li><p>使用IP地址和服务器建立TCP连接【三次握手】</p></li><li><p>建立连接后，浏览器构建数据包，向服务器发送请求消息</p></li><li><p>服务器接收到消息后根据请求信息构建响应数据，发送回网络进程</p></li><li><p>网络进程接收到响应数据后进行解析，如果状态码返回了200，说明服务器返回了数据</p></li><li><p>数据传输完成，TCP四次挥手断开连接</p></li><li><p>网络进程将获取到的数据包进行解析，根据响应头类型判断，如果是字节流类型，就交给下载管理器，如果是text&#x2F;html类型 就通知浏览器进程获取到文档准备渲染</p></li><li><p>渲染进程对文档进行页面解析和子资源加载。解析html生成DOM树，解析css生成规则树。两树结合生成渲染树，浏览器绘制各个节点，将页面展现给用户</p></li></ol><h2 id="二、简单的HTTP协议"><a href="#二、简单的HTTP协议" class="headerlink" title="二、简单的HTTP协议"></a>二、简单的HTTP协议</h2><h4 id="URI与URL的关系"><a href="#URI与URL的关系" class="headerlink" title="URI与URL的关系"></a>URI与URL的关系</h4><p>URI（Uniform Resource Identifier 统一资源表示符）</p><p><strong>用字符串标识某一互联网资源</strong></p><p>URL（Uniform Resource Locator 统一资源定位符）</p><p><strong>资源的位置</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">URL</span>是URI的子集<br></code></pre></td></tr></table></figure><h4 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h4><p><strong>请求必定由客户端发出，而服务器端回复响应</strong></p><p><em>请求报文：</em></p><ol><li>请求方法</li><li>请求URI</li><li>协议版本</li><li>可选的请求首部字段</li><li>内容实体</li></ol><p><em>响应报文</em></p><ol><li>协议版本</li><li>状态码</li><li>用以解释状态码的原因短语</li><li>可选的响应首部字段</li><li>实体主体</li></ol><h4 id="cookie技术（通过请求和响应报文中写入Cookie信息来控制客户端的状态）"><a href="#cookie技术（通过请求和响应报文中写入Cookie信息来控制客户端的状态）" class="headerlink" title="cookie技术（通过请求和响应报文中写入Cookie信息来控制客户端的状态）"></a>cookie技术（通过请求和响应报文中写入Cookie信息来控制客户端的状态）</h4><p><strong>HTTP是一种不保存状态吗，即无状态(stateless)协议</strong></p><p>好处：不保存状态，可以减少服务器的cpu及内存资源的消耗</p><p><a href="https://blog.csdn.net/m0_64224975/article/details/124934388">Cookie与session的区别</a></p><h4 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h4><ol><li><p>GET 获取资源</p><p>用来请求访问已被URI识别的资源</p></li><li><p>POST 传输实体主体</p><p>用来传输实体的主体，虽然用get也可以传输实体的主体，但一般不用get方法进行传输。</p><p><a href="https://blog.csdn.net/qq_42931285/article/details/119852294">POST与GET区别详解</a></p></li><li><p>PUT 传输文件</p><p>HTTP&#x2F;1.1的put方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般不使用。</p></li><li><p>HEAD 获得报文首部</p><p>用于确认URI的有效性及资源更新的日期时间等</p></li><li><p>DELETE 删除文件</p><p>按请求URI删除指定的资源</p></li><li><p>OPTIONS 询问支持的方法</p><p>用来查询针对请求URI指定的资源支持的方法</p></li><li><p>TRACT 追踪路径</p><p>让web服务器端将之前的请求通信返回给客户端</p><p>（发送请求是，在Max-forwards首部字段中填入数值，每经过一个服务器就将该数值减1，当数值刚好减到0时，就停止传输。不常用，并且容易引发XST【cross-site Tracing 跨站追踪】攻击）</p></li><li><p>CONNECT 要求用隧道协议连接代理 </p><p>要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（Secure Sockets Layer安全套接层）和 TLS（Transport layer Security 传输层安全）协议把通信内容加密后经网络隧道传输</p></li><li><p>LINK 建立和资源之间的联系</p></li><li><p>UNLINK 断开连接关系</p></li></ol><p>HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接</p><h4 id="如何节省通信开销？"><a href="#如何节省通信开销？" class="headerlink" title="如何节省通信开销？"></a>如何节省通信开销？</h4><p><strong>持久连接（HTTP keep-alive、HTTP connection reuse）</strong></p><p>特点：只要任意一段没有明确提出断开连接，则保持TCP连接状态</p><p>好处：减少TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</p><p><strong>在HTTP1.1中，所有的连接默认都是持久连接。</strong></p><p><strong>管线化（pipelining）</strong></p><p>可以做到同时并行发送请求，而不需要一个接一个地等待响应。管线化比持久连接还要快。请求数越多，时间差就越明显。</p><h2 id="三、HTTP报文内的HTTP信息"><a href="#三、HTTP报文内的HTTP信息" class="headerlink" title="三、HTTP报文内的HTTP信息"></a>三、HTTP报文内的HTTP信息</h2><h4 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h4><ol><li><p>报文首部 - 服务端或者客户端需要处理的请求或响应的内容及属性</p><blockquote><p>请求报文</p></blockquote><ul><li>请求行 - 包含用于请求的方法，请求URI和HTTP版本</li><li>请求首部字段</li><li>通用首部字段</li><li>实体首部字段</li><li>其他</li></ul><blockquote><p>响应报文</p></blockquote><ul><li>状态行 - 包含表明响应结果的状态码，原因短语和HTTP版本</li><li>响应首部字段</li><li>通用首部字段</li><li>实体首部字段</li><li>其他</li></ul></li><li><p>报文主体 - 应被发送的内容</p></li></ol><h4 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h4><blockquote><p>内容编码</p></blockquote><p>指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。</p><p><em>常用的内容编码</em></p><ul><li>gzip（GNU zip）</li><li>compress （UNIX系统的标准压缩）</li><li>deflate （zlib）</li><li>identiy（不进行编码）</li></ul><blockquote><p>分块传输编码（Chunked Transfer Coding）</p></blockquote><p>将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小。由接收的客户端负责解码，恢复到编码前的实体主体</p><h4 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h4><p><strong>MIME（Multporpose Internet Mail Extensions 多用途因特网邮件）机制</strong></p><blockquote><p>为了容纳多份不同类型的数据，HTTP协议中采纳了 多部份对象集合（multipart）</p></blockquote><ul><li>multipart&#x2F;form-data <em>在web表单文件上传时使用</em></li><li>multipart&#x2F;byteranges <em>状态码206响应报文包含了多个范围内容时使用</em>（content-range）【断线重联&#x2F;范围请求】</li></ul><p><strong>在HTTP报文中使用多部分对象集合时，需要在首部字段里加上Content-type</strong></p><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><p>客户端和服务端就响应的资源进行交涉，然后提供给客户端最为合适的资源【语言、字符集、编码方式】</p><p><em>eg: 当浏览器的默认语言为英语或中文，访问相同URI的Web页面时，则会显示对应的英语版或中文版的web页面</em></p><ol><li>服务器驱动协商 - 由服务端进行内容协商</li><li>客户端驱动协商 - 由客户端进行内容协商</li><li>透明协商 - 由服务器端和客户端各自进行内容协商</li></ol><h2 id="四、返回结果的HTTP状态码"><a href="#四、返回结果的HTTP状态码" class="headerlink" title="四、返回结果的HTTP状态码"></a>四、返回结果的HTTP状态码</h2><p>当客户端向服务器端发送请求时，描述返回的请求结果</p><p><em>数字第一位指定了响应类别</em></p><h5 id="1XX-Informational（信息性状态码）"><a href="#1XX-Informational（信息性状态码）" class="headerlink" title="1XX Informational（信息性状态码）"></a>1XX Informational（信息性状态码）</h5><p>【接收的请求正在处理】</p><h5 id="2XX-Success（成功状态码）"><a href="#2XX-Success（成功状态码）" class="headerlink" title="2XX Success（成功状态码）"></a>2XX Success（成功状态码）</h5><p>【请求正常处理完毕】</p><ul><li><p>200 Ok - 请求已正常处理</p></li><li><p>204 No Content - 请求处理成功，但没有资源可返回</p><p><em>eg：在只需要从客户端往服务端发送信息，而对客户端不需要发送新信息内容的情况下时使用</em></p></li><li><p>206 Partial Content - 对资源某一部分的请求，表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容</p></li></ul><h5 id="3XX-Redirection（重定向状态码）"><a href="#3XX-Redirection（重定向状态码）" class="headerlink" title="3XX Redirection（重定向状态码）"></a>3XX Redirection（重定向状态码）</h5><p>【需要进行附加操作以完成请求】</p><ul><li>301 Moved Permanently - 永久性重定向，表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI</li><li>302 Found - 临时性重定向，表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问</li><li>303 See Other - 表示请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源，与302有相同的功能</li><li>304 - Not Modified - 和重定向没关系的状态码，表示客户端发送请求，服务端允许请求访问资源，但因发生请求未满足的条件后，直接返回304</li><li>307 Temporary Redirect - 临时重定向 与302类似，但会遵照浏览器标准，不会从POST变成GET</li></ul><p><em>当301、302、303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送</em></p><h5 id="4XX-Client-Error（客户端错误状态码）"><a href="#4XX-Client-Error（客户端错误状态码）" class="headerlink" title="4XX Client Error（客户端错误状态码）"></a>4XX Client Error（客户端错误状态码）</h5><p>【服务器无法处理请求，表明客户端是发生错误的原因所在】</p><ul><li><p>400 Bad Request - 表示请求报文中存在语法错误</p></li><li><p>401 Unauthorized - 表示发送的请求需要通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。另：若之前已进行过1次请求，则表示用户认证失败</p></li><li><p>403 Forbidden -表示对请求资源的访问被服务器拒绝了。</p><p><em>eg：未获得文件系统的访问权限，访问权限出现某些问题</em></p></li><li><p>404 Not Found - 服务器上没有请求的资源，或者服务器端拒绝请求且不想说明理由</p></li></ul><h5 id="5XX-Server-Error（服务器错误状态码）"><a href="#5XX-Server-Error（服务器错误状态码）" class="headerlink" title="5XX Server Error（服务器错误状态码）"></a>5XX Server Error（服务器错误状态码）</h5><p>【服务器处理请求出错】</p><ul><li>500 Internal Server Error - 表明服务器端在执行请求时发生了错误。也有可能时web应用存在的bug或某些临时的故障</li><li>503 Service Unavailable -表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">仅记录在RFC2616上的HTTP状态码就有40种，加上webDAV（基于万维网的分布式创作和版本控制）和RFC6585等扩展，数量就达60余种<br></code></pre></td></tr></table></figure><h2 id="五、与HTTP协作的Web服务器"><a href="#五、与HTTP协作的Web服务器" class="headerlink" title="五、与HTTP协作的Web服务器"></a>五、与HTTP协作的Web服务器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一台web服务器可搭建多个独立域名的web网站，也可作为通信路径上的中转服务器提升传输效率<br></code></pre></td></tr></table></figure><h5 id="单台虚拟主机实现多个域名"><a href="#单台虚拟主机实现多个域名" class="headerlink" title="单台虚拟主机实现多个域名"></a>单台虚拟主机实现多个域名</h5><blockquote><p>在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的web网站，因此在发送HTTP请求时，必须在Host首部内完成指定主机名或域名的URI</p></blockquote><h5 id="通信数据转发程序"><a href="#通信数据转发程序" class="headerlink" title="通信数据转发程序"></a>通信数据转发程序</h5><ul><li><p>代理 </p><p>服务器和客户端之间的“中间人”角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端</p></li><li><p>网关</p><p>转发其他服务器通信数据的服务器</p></li><li><p>隧道</p><p>在相隔甚远的客户端和服务器两者之间进行中转，并保持通信连接的应用程序</p></li></ul><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p>代理服务器或客户端本地磁盘内保存的资源副本。</p><p>好处：减少为源服务器的访问，节省了通信流量和通信时间。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">在HTTP之前出现的协议<br> 。FTP <span class="hljs-regexp">//</span>传输文件时使用的协议<br> 。NNTP <span class="hljs-regexp">//</span>用于NetNews电子会议室内传送消息的协议，淘汰<br> 。Archie <span class="hljs-regexp">//</span>搜索anonymousFTP公开的文件信息的协议，淘汰<br> 。WAIS <span class="hljs-regexp">//</span>以关键词检索多个数据库使用的协议，淘汰<br> 。Gopher <span class="hljs-regexp">//</span>查找与互联网连接的计算机内信息的协议，淘汰<br></code></pre></td></tr></table></figure><h2 id="六、HTTP首部（第三章扩展）"><a href="#六、HTTP首部（第三章扩展）" class="headerlink" title="六、HTTP首部（第三章扩展）"></a>六、HTTP首部（第三章扩展）</h2><h2 id="七、确保Web安全的HTTPS"><a href="#七、确保Web安全的HTTPS" class="headerlink" title="七、确保Web安全的HTTPS"></a>七、确保Web安全的HTTPS</h2><h2 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h2><h2 id="九、基于HTTP的功能追加协议"><a href="#九、基于HTTP的功能追加协议" class="headerlink" title="九、基于HTTP的功能追加协议"></a>九、基于HTTP的功能追加协议</h2><h2 id="十、构建Web内容的技术"><a href="#十、构建Web内容的技术" class="headerlink" title="十、构建Web内容的技术"></a>十、构建Web内容的技术</h2><h2 id="十一、Web的攻击技术"><a href="#十一、Web的攻击技术" class="headerlink" title="十一、Web的攻击技术"></a>十一、Web的攻击技术</h2>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术类书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github简单部署</title>
    <link href="/DingFengBo/2022/06/02/hexo+github%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/"/>
    <url>/DingFengBo/2022/06/02/hexo+github%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步：准备工作"><a href="#第一步：准备工作" class="headerlink" title="第一步：准备工作"></a>第一步：准备工作</h2><ul><li><p><strong>安装node.js</strong></p><p>  node官网：  <a href="http://nodejs.cn/">http://nodejs.cn/</a></p></li><li><p><strong>安装git</strong></p><p> git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p></li><li><p><strong>github创建个人远程仓库</strong></p><p>github官网：<a href="https://github.com/">https://github.com/</a></p><p>配置</p></li><li><p>安装hexo</p><p>hexo官网：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> //查看是否安装<span class="hljs-keyword">node</span><br><br><span class="hljs-title">git</span> --<span class="hljs-keyword">version</span> // 查看是否安装git<br><br>sudo npm install hexo-cli<br></code></pre></td></tr></table></figure><h2 id="第二步：配置Hexo"><a href="#第二步：配置Hexo" class="headerlink" title="第二步：配置Hexo"></a>第二步：配置Hexo</h2><p>根据自己需求配置_config.yml</p><h2 id="第三步：编写博文"><a href="#第三步：编写博文" class="headerlink" title="第三步：编写博文"></a>第三步：编写博文</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">title</span>（标题）<br>tags（标签）：经验、js语法糖、网络、浏览器、github、杂文笔记、随笔、mac、工具随记、css、vue、webGL...<br>categories（分类）<br>excerpt（摘录、摘要）<br></code></pre></td></tr></table></figure><h2 id="第四步：总结-命令"><a href="#第四步：总结-命令" class="headerlink" title="第四步：总结-命令"></a>第四步：总结-命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo hexo clean <span class="hljs-regexp">//</span> 清除缓存<br>sudo hexo g <span class="hljs-regexp">//</span> 生成静态文件<br>sudo hexo s <span class="hljs-regexp">//</span> 启动本地服务<br>sudo hexo d <span class="hljs-regexp">//</span> 发布<br>hexo new page <span class="hljs-regexp">//</span> 新增文件夹<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo+github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器内核（渲染引擎）+ JS引擎</title>
    <link href="/DingFengBo/2021/07/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <url>/DingFengBo/2021/07/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器内核（渲染引擎）-JS引擎"><a href="#浏览器内核（渲染引擎）-JS引擎" class="headerlink" title="浏览器内核（渲染引擎）+ JS引擎"></a>浏览器内核（渲染引擎）+ JS引擎</h1><h2 id="一、主要概念"><a href="#一、主要概念" class="headerlink" title="一、主要概念"></a>一、主要概念</h2><h3 id="1、浏览器内核"><a href="#1、浏览器内核" class="headerlink" title="1、浏览器内核"></a>1、浏览器内核</h3><blockquote><p><strong>最初</strong>内核的概念包括渲染引擎与JS引擎，<strong>目前</strong>习惯直接称渲染引擎为内核，JS引擎独立</p></blockquote><p><em>因此</em></p><p><em>以前称，chrome浏览器使用Chromium内核，blink渲染引擎，V8JS引擎</em></p><p>现在称，chrome浏览器使用bink内核，V8JS引擎</p><h3 id="2、渲染引擎"><a href="#2、渲染引擎" class="headerlink" title="2、渲染引擎"></a>2、渲染引擎</h3><blockquote><p>渲染引擎（Rendering Engine），一般习惯将之称为“浏览器内核”，主要功能是解析HTML&#x2F;CSS，进行页面渲染，渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息</p></blockquote><h3 id="3、JS引擎"><a href="#3、JS引擎" class="headerlink" title="3、JS引擎"></a>3、JS引擎</h3><blockquote><p>专门处理JavaScript脚本的虚拟机、解释器，用来解释执行js代码。</p></blockquote><p><em>在早期，内核中也是包含js引擎的，而现在js引擎越来越独立，已经单独提出来了</em></p><h2 id="二、主要浏览器内核"><a href="#二、主要浏览器内核" class="headerlink" title="二、主要浏览器内核"></a>二、主要浏览器内核</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">IE</span>——微软 =&gt; <span class="hljs-title class_">Trident</span>-&gt;<span class="hljs-title class_">EdgeHTML</span><br><br><span class="hljs-title class_">Chrome</span>——<span class="hljs-title class_">Google</span> =&gt; <span class="hljs-title class_">Webkit</span>-&gt;<span class="hljs-title class_">Blink</span><br><br><span class="hljs-title class_">Firefox</span>——<span class="hljs-title class_">Mozilla</span> =&gt;  <span class="hljs-title class_">Gecko</span><br><br><span class="hljs-title class_">Safari</span>——苹果 =&gt; <span class="hljs-title class_">Webkit</span><br><br><span class="hljs-title class_">Opera</span>——<span class="hljs-title class_">Opera</span> =&gt; <span class="hljs-title class_">Presto</span><br></code></pre></td></tr></table></figure><p><em>最近消息说微软要把edge浏览器引擎换成Chromium内核，Trident和EdgeHTML要慢慢退出历史舞台了</em></p><h2 id="三、主要JS引擎"><a href="#三、主要JS引擎" class="headerlink" title="三、主要JS引擎"></a>三、主要JS引擎</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">IE</span>——微软 =&gt; <span class="hljs-title class_">Edge</span> <span class="hljs-title class_">JScript</span>(<span class="hljs-title class_">IE3</span><span class="hljs-number">.0</span>-<span class="hljs-title class_">IE8</span><span class="hljs-number">.0</span> / <span class="hljs-title class_">Chakra</span>(<span class="hljs-title class_">IE9</span>+之后))<br><br><span class="hljs-title class_">Chrome</span>——<span class="hljs-title class_">Google</span> =&gt; <span class="hljs-variable constant_">V8</span><br><br><span class="hljs-title class_">Firefox</span>——<span class="hljs-title class_">Mozilla</span> =&gt; <span class="hljs-title class_">SpiderMonkey</span>(<span class="hljs-number">1.0</span>-<span class="hljs-number">3.0</span>) / <span class="hljs-title class_">TraceMonkey</span>(<span class="hljs-number">3.5</span>-<span class="hljs-number">3.6</span>) / <span class="hljs-title class_">JaegerMonkey</span>(<span class="hljs-number">4.0</span>-)<br><br><span class="hljs-title class_">Safari</span>——苹果 =&gt; <span class="hljs-title class_">Nitro</span>(<span class="hljs-number">4</span>-)<br><br><span class="hljs-title class_">Opera</span>——<span class="hljs-title class_">Opera</span> =&gt; <span class="hljs-title class_">Linear</span> <span class="hljs-title function_">A</span>(<span class="hljs-number">4.0</span>-<span class="hljs-number">6.1</span>) / <span class="hljs-title class_">Linear</span> <span class="hljs-title function_">B</span>(<span class="hljs-number">7.0</span>-<span class="hljs-number">9.2</span>) / <span class="hljs-title class_">Futhark</span>(<span class="hljs-number">9.5</span>-<span class="hljs-number">10.2</span>) /  <span class="hljs-title class_">Carakan</span>(<span class="hljs-number">10.5</span>-)<br></code></pre></td></tr></table></figure><p><em>SpiderMonkey是第一款JS引擎，是JavaScript之父Brendan Eich 在网景的时候写的，从某种意义上来说，火狐才是正统</em></p><p><em>参考文献</em></p><ol><li><a href="https://www.cnblogs.com/guanghe/p/11719334.html">https://www.cnblogs.com/guanghe/p/11719334.html</a></li><li><a href="https://baijiahao.baidu.com/s?id=1620294279514352345&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1620294279514352345&amp;wfr=spider&amp;for=pc</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决GitHub访问过慢</title>
    <link href="/DingFengBo/2021/07/16/%E8%A7%A3%E5%86%B3GitHub%E8%AE%BF%E9%97%AE%E8%BF%87%E6%85%A2/"/>
    <url>/DingFengBo/2021/07/16/%E8%A7%A3%E5%86%B3GitHub%E8%AE%BF%E9%97%AE%E8%BF%87%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>获取github真实访问地址：<a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a> </p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>分别搜索 <strong>github.com  、  github.global.ssl.fastly.net</strong></p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>找到host文件地址</p><p>（1）win ：<strong>C:\Windows\System32\drivers\etc\hosts</strong></p><p>（2）mac&#x2F;linux：&#x2F;etc&#x2F;hosts</p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>在文件最后添加IP 和 域名 （如下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">140.82</span><span class="hljs-number">.112</span><span class="hljs-number">.4</span>        <span class="hljs-title class_">GitHub</span>.<span class="hljs-property">com</span><br><span class="hljs-number">199.232</span><span class="hljs-number">.69</span><span class="hljs-number">.194</span>        github.<span class="hljs-property">global</span>.<span class="hljs-property">ssl</span>.<span class="hljs-property">Fastly</span>.<span class="hljs-property">net</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github访问</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IE背景线性渐变</title>
    <link href="/DingFengBo/2021/07/16/IE%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"/>
    <url>/DingFengBo/2021/07/16/IE%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>背景线性渐变<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">           <span class="hljs-selector-class">.gradient</span>&#123;</span><br><span class="language-css">               <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;</span><br><span class="language-css">               <span class="hljs-attribute">height</span>:<span class="hljs-number">150px</span>;</span><br><span class="language-css">               <span class="hljs-attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="hljs-built_in">gradient</span>(startcolorstr=<span class="hljs-string">&#x27;#FFB6C1&#x27;</span>,endcolorstr=<span class="hljs-string">&#x27; #8B008B&#x27;</span>,gradientType=<span class="hljs-number">0</span>);</span><br><span class="language-css">               <span class="hljs-attribute">background</span>:red;  </span><br><span class="language-css">               <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(red, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>));</span><br><span class="language-css">               <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(red, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>));</span><br><span class="language-css">               <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>));</span><br><span class="language-css">           &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gradient&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法糖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法使用基础标签</title>
    <link href="/DingFengBo/2021/07/15/markdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/"/>
    <url>/DingFengBo/2021/07/15/markdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>:happy:</p><p><code>I am code</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">111</span>)<br></code></pre></td></tr></table></figure><p><em>斜体</em></p><p><strong>粗体</strong></p><hr><p>HI<a href="%E6%88%91%E6%98%AF%E6%B3%A8%E9%87%8A">^注释</a></p><table><thead><tr><th>name</th><th>sex</th><th>school</th><th>wages</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>:—</th><th>:—:</th><th>:—:</th><th>—:</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li><p><input disabled="" type="checkbox"> 吃饭</p></li><li><p><input disabled="" type="checkbox"> 睡觉</p></li><li><p><input disabled="" type="checkbox"> 学习</p><ul><li><p>无序列表1</p><ul><li>1</li></ul><ul><li>无序列表3</li></ul><p><strong>有序列表</strong></p><ol><li><p>有序列表</p></li><li><p>有序列表</p></li></ol></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《生命的重建》摘录</title>
    <link href="/DingFengBo/2021/07/13/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%E4%B8%80%E5%88%87%E9%83%BD%E5%A5%BD/"/>
    <url>/DingFengBo/2021/07/13/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%E4%B8%80%E5%88%87%E9%83%BD%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在我广阔的人生中，</p><p>一切都是完美、完整和完全的。</p><p>我相信有一种比我强大得多的力量，</p><p>每天、每时、每刻从我身体流过。</p><p>我打开自己让智慧进来，</p><p>我知道大千世界只有一种智慧。</p><p>在这智慧里面有所有的答案，</p><p>所有的解决方案，所有的康复方法，</p><p>所有的新创造。</p><p>我相信这种力量和智慧，</p><p>我需要知道的一切都已被揭示，</p><p>我所需要的一切都会到来，</p><p>在正确的时间、地点，按照正确的顺序。</p><p>我的世界里一切都好。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活类书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js语法糖</title>
    <link href="/DingFengBo/2021/07/13/js%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <url>/DingFengBo/2021/07/13/js%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    
    <content type="html"><![CDATA[<h1 id="将一维数组切割成特定长度的二维数组"><a href="#将一维数组切割成特定长度的二维数组" class="headerlink" title="将一维数组切割成特定长度的二维数组"></a>将一维数组切割成特定长度的二维数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">21</span>,<span class="hljs-number">50</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> size=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sliceArr</span>(<span class="hljs-params">array, size</span>) &#123;<br><span class="hljs-keyword">var</span> result = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(array.<span class="hljs-property">length</span> / size); x++) &#123;<br><span class="hljs-keyword">var</span> start = x * size;<br><span class="hljs-keyword">var</span> end = start+ size;<br>result.<span class="hljs-title function_">push</span>(array.<span class="hljs-title function_">slice</span>(start, end));<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array,<span class="hljs-string">&#x27;未处理数组&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sliceArr</span>(array, size),<span class="hljs-string">&#x27;新数组-分组后的&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="数组原型链上添加去重方法"><a href="#数组原型链上添加去重方法" class="headerlink" title="数组原型链上添加去重方法"></a>数组原型链上添加去重方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>]<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">quchong</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-variable language_">this</span>)]<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">quchong</span>())<br></code></pre></td></tr></table></figure><h1 id="过滤数组对象"><a href="#过滤数组对象" class="headerlink" title="过滤数组对象"></a>过滤数组对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;11&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;22&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;33&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">4</span>,<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;44&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">5</span>,<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;55&#x27;</span>&#125;]<br><span class="hljs-keyword">let</span> arr0 = [<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;33&#x27;</span>,<span class="hljs-string">&#x27;55&#x27;</span>]<br><br><span class="hljs-keyword">let</span> newArr = []<br>arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br><span class="hljs-keyword">if</span> (arr0.<span class="hljs-title function_">indexOf</span>(item.<span class="hljs-property">lable</span>) !== -<span class="hljs-number">1</span>)<br>newArr.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">lable</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)<br></code></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">traverse</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-keyword">if</span> (arr[i].<span class="hljs-property">hasChildren</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">traverse</span>(arr[i].<span class="hljs-property">children</span>);<br>&#125;<br><span class="hljs-keyword">let</span> temp = &#123;&#125;;<br>temp.<span class="hljs-property">label</span> = arr[i].<span class="hljs-property">label</span>;<br>temp.<span class="hljs-property">id</span> = arr[i].<span class="hljs-property">id</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">treeData</span>.<span class="hljs-title function_">push</span>(temp)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法糖</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
